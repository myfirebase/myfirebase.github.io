{
    "docs": [
        {
            "location": "/",
            "text": "Myfirebase\n \nSPA Framework\n Documentation\n\n\n\n\n\nInfo\n\n\nWelcome to Myfirebase docs, in this guide, we assume that you are already familiar with \nVueJs framework ecosystem\n, \nwebpack\n, \nFirebase\n and \nnode package manager\n.\n\n\n\n\nMyfirebase\n Is a decoupled single page application framework which is highly compatible with \nGoogle Firebase\n. It has some really cool features.\n\n\n\n\n\n\nEasy to use\n: With a simple, clear and well-organized directory structure.\n\n\n\n\n\n\nSeparation of concerns\n: Using \nVuejs\n components and \nVuex\n for the state management system.\n\n\n\n\n\n\nFirebase\n: Using the best of Google Firebase features such as Authentication, Realtime Database, Cloud storage and others.\n\n\n\n\n\n\nProgressive web applications\n: PWA made easy.\n\n\n\n\n\n\nMaterial design\n: Material components using \nvue-material\n.",
            "title": "Welcome"
        },
        {
            "location": "/installation/",
            "text": "Prerequisites\n\u00b6\n\n\n\n\n\n\nNPM\n is the recommended installation method when building large-scale applications with \nMyfirebase\n.\n\n\nIf this is the first time you are trying \nnpm\n , don't worry, we'll guide you every step of the way.\n\n\n\n\n\n\nHow to Install Node.js and NPM on Windows\n\n\n\n\n\n\nHow to Install Node.js and NPM on a Mac\n\n\n\n\n\n\nHow to Install Node.js and NPM on a Linux\n\n\n\n\n\n\n\n\n\n\nFirebase command line interface\n, \nnpm install -g firebase-tools\n\n\n\n\n\n\nMyfirebase-cli\n, \nnpm install -g myfirebase-cli\n\n\n\n\n\n\nInstalling Myfirebase\n\u00b6\n\n\n\n\nCreate a new Myfirebase project via myfirebase-cli. \n\n\n\n\n# Create new project with myfirebase-cli\n\n$ myfirebase new:project my-project\n\n\n# Change directory\n\n$ \ncd\n my-project\n\n\n# Install dependencies\n\n$ npm install\n\n\n\n\n\n\n\nCreate a new project through the \nFirebase Console\n.\n\n\n\n\n\n\nInfo\n\n\nAfter creating a new Google Firebase project, copy and paste the configuration information into your project, \n/src/firebase/config.js\n. You can get your configuration information by clicking on \"Add Firebase to your web app\" on the Overview page. \n\n\n\n\n\n\nLogin to your Google account.. \n\n\n\n\n# Sign in using your Google account\n\n$ firebase login\n\n\n# Initialize firebase project\n\n$ firebase init\n\n\n\n\n\n\n\nLaunch your app.\n\n\n\n\n# Run the server\n\n$ npm run dev\n\n\n\n\n\nCongratulations\n\u00b6\n\n\n\n\nCongratulations\n\n\nYou've now installed \nMyfirebase\n correctly, now let's dive into the framework directory structure to see what's going under the hood, \nDirectory Structure\n.\n\n\n\n\nProduction\n\u00b6\n\n\n# Production\n\n$ npm run build\n\n\n\n\n\nDeploy your project\n\u00b6\n\n\n# Deploy project\n\n$ firebase deploy",
            "title": "Installation"
        },
        {
            "location": "/installation/#prerequisites",
            "text": "NPM  is the recommended installation method when building large-scale applications with  Myfirebase .  If this is the first time you are trying  npm  , don't worry, we'll guide you every step of the way.    How to Install Node.js and NPM on Windows    How to Install Node.js and NPM on a Mac    How to Install Node.js and NPM on a Linux      Firebase command line interface ,  npm install -g firebase-tools    Myfirebase-cli ,  npm install -g myfirebase-cli",
            "title": "Prerequisites"
        },
        {
            "location": "/installation/#installing-myfirebase",
            "text": "Create a new Myfirebase project via myfirebase-cli.    # Create new project with myfirebase-cli \n$ myfirebase new:project my-project # Change directory \n$  cd  my-project # Install dependencies \n$ npm install   Create a new project through the  Firebase Console .    Info  After creating a new Google Firebase project, copy and paste the configuration information into your project,  /src/firebase/config.js . You can get your configuration information by clicking on \"Add Firebase to your web app\" on the Overview page.     Login to your Google account..    # Sign in using your Google account \n$ firebase login # Initialize firebase project \n$ firebase init   Launch your app.   # Run the server \n$ npm run dev",
            "title": "Installing Myfirebase"
        },
        {
            "location": "/installation/#congratulations",
            "text": "Congratulations  You've now installed  Myfirebase  correctly, now let's dive into the framework directory structure to see what's going under the hood,  Directory Structure .",
            "title": "Congratulations"
        },
        {
            "location": "/installation/#production",
            "text": "# Production \n$ npm run build",
            "title": "Production"
        },
        {
            "location": "/installation/#deploy-your-project",
            "text": "# Deploy project \n$ firebase deploy",
            "title": "Deploy your project"
        },
        {
            "location": "/directory-structure/",
            "text": "By default, Myfirebases structure provides a great starting point for your application. However, you are free to organize your files/directories as you like.\n\n\nRoot Directory\n\u00b6\n\n\nThe root directory contains \nsrc\n, \nbuild\n, \nconfig\n, \nfunctions\n and \npublic\n directories. \n\n\nThis directory also houses your firebase.json and database.rules.json file.\n\n\n/src\n\u00b6\n\n\nYour main code lives here, Where the application core is located, \nfirebase\n, routes, main.js and Vue components, 99% of the time, you'll be working in \nsrc/\n.\n\n\n\n\n\n\n/src/assets\n directory, where you can write your global sass/scss preprocessor.\n\n\n\n\n\n\n/src/firebase\n directory, contains firebase SDK classes and config.js file, \n\n\n\n\n\n\n/src/routes\n directory, where you can define your application routes, \nVuejs Routes Docs\n. \n\n\n\n\n\n\nmain.js file where your application core is defined. \n\n\n\n\n\n\n/src/component\n directory as the name implies, contains all of your application components files, here where you can create new Vue components, according to vuejs, components took \n.vue\n as extension, see \nVuejs Components\n.\n\n\n\n\n\n\nFor sure, you are free to define and organize this directory structure however you like.\n\n\n/functions\n\u00b6\n\n\n\n\nFirebase Cloud functions docs\n\n\nNew to firebase?, please see \nFirebase Cloud functions docs\n.\n\n\n\n\nIn the firebase cloud functions directory,you can write some back-end functions to handle cloud messaging and business logic if necessary and a lot of advanced stuff.\n\n\n\n\nGoogle Cloud Platform\n\n\nIt's become easier to integrate some advanced technologies such as machine learning and image processing with \nGoogle Cloud Platform\n and more.\n\n\n\n\n/storage\n\u00b6\n\n\nThe storage directory contains all of your storage files, using one of Vuejs eco-system, see \nVuex\n.\n\n\n/public\n\u00b6\n\n\nThe public directory contains the main index.html file, it also houses all of your applications compiled assets CSS, JS files and service-workers, \nthese assets will be auto injected to index.html\n\n\n\n\nservice workers\n\n\nGoogle developers had made some cool articles about the service-worker concept, see \nService Workers: an Introduction\n.\n\n\n\n\n\n\n\n\nindex.html \nindex page\n\n\n\n\n\n\n404.html \nNotFound page 404\n\n\n\n\n\n\ncss \ncss directory\n\n\n\n\n\n\njs \njs directory\n\n\n\n\n\n\nservice-worker.js\n\n\n\n\n\n\nfirebase-messaging-sw.js\n\n\n\n\n\n\nmanifest.json\n\n\n\n\n\n\n/build\n\u00b6\n\n\nApparently, you may not want to touch anything right here, this directory contains all the \nbuild\n files managed by node.js unless you want to specify some of your additional configuration such as development server port, service-workers or even changing web pack configuration, then you may proceed.\n\n\n/config\n\u00b6\n\n\nWhere the development and the production mode configuration are located.\n\n\n/static\n\u00b6\n\n\nWhere static files are located, images and icons are used as a static assets in your applications.\n\n\n/tests\n\u00b6\n\n\nWhere your application tests are located, by default Myfirebase comes with eslint and karma for unit testing, you are free to integrate other libraries and plugins such as \nnight watch\n e2e.",
            "title": "Directory Structure"
        },
        {
            "location": "/directory-structure/#root-directory",
            "text": "The root directory contains  src ,  build ,  config ,  functions  and  public  directories.   This directory also houses your firebase.json and database.rules.json file.",
            "title": "Root Directory"
        },
        {
            "location": "/directory-structure/#src",
            "text": "Your main code lives here, Where the application core is located,  firebase , routes, main.js and Vue components, 99% of the time, you'll be working in  src/ .    /src/assets  directory, where you can write your global sass/scss preprocessor.    /src/firebase  directory, contains firebase SDK classes and config.js file,     /src/routes  directory, where you can define your application routes,  Vuejs Routes Docs .     main.js file where your application core is defined.     /src/component  directory as the name implies, contains all of your application components files, here where you can create new Vue components, according to vuejs, components took  .vue  as extension, see  Vuejs Components .    For sure, you are free to define and organize this directory structure however you like.",
            "title": "/src"
        },
        {
            "location": "/directory-structure/#functions",
            "text": "Firebase Cloud functions docs  New to firebase?, please see  Firebase Cloud functions docs .   In the firebase cloud functions directory,you can write some back-end functions to handle cloud messaging and business logic if necessary and a lot of advanced stuff.   Google Cloud Platform  It's become easier to integrate some advanced technologies such as machine learning and image processing with  Google Cloud Platform  and more.",
            "title": "/functions"
        },
        {
            "location": "/directory-structure/#storage",
            "text": "The storage directory contains all of your storage files, using one of Vuejs eco-system, see  Vuex .",
            "title": "/storage"
        },
        {
            "location": "/directory-structure/#public",
            "text": "The public directory contains the main index.html file, it also houses all of your applications compiled assets CSS, JS files and service-workers,  these assets will be auto injected to index.html   service workers  Google developers had made some cool articles about the service-worker concept, see  Service Workers: an Introduction .     index.html  index page    404.html  NotFound page 404    css  css directory    js  js directory    service-worker.js    firebase-messaging-sw.js    manifest.json",
            "title": "/public"
        },
        {
            "location": "/directory-structure/#build",
            "text": "Apparently, you may not want to touch anything right here, this directory contains all the  build  files managed by node.js unless you want to specify some of your additional configuration such as development server port, service-workers or even changing web pack configuration, then you may proceed.",
            "title": "/build"
        },
        {
            "location": "/directory-structure/#config",
            "text": "Where the development and the production mode configuration are located.",
            "title": "/config"
        },
        {
            "location": "/directory-structure/#static",
            "text": "Where static files are located, images and icons are used as a static assets in your applications.",
            "title": "/static"
        },
        {
            "location": "/directory-structure/#tests",
            "text": "Where your application tests are located, by default Myfirebase comes with eslint and karma for unit testing, you are free to integrate other libraries and plugins such as  night watch  e2e.",
            "title": "/tests"
        },
        {
            "location": "/components/",
            "text": "A little advanced, components are custom elements that Vue compiler would attach specified behaviors too. They contain your HTML, scripts, and stylesheets at the same time all in one file.\n\n\nThey are located in the \n/src/components/\n directory.\n\n\nTo create a new component you need to run \nnew:component command\n in your terminal.\n\n\nmyfirebase new:component <component-name>\n, the Myfirebase-CLI will generate a new component and place it inside your components directory \n/src/components/<component-name>.vue\n.\n\n\nA simple component might look something like this:\n\n\n<\ntemplate\n>\n\n    \n<\ndiv\n \nclass\n=\n\"container\"\n>\n\n        {{hello}}\n    \n</\ndiv\n>\n\n\n</\ntemplate\n>\n\n\n\n\n<\nscript\n>\n\n\nexport\n \ndefault\n \n{\n\n    \nmounted\n()\n \n{\n\n        \nconsole\n.\nlog\n(\n\"Component mounted . . . \"\n)\n\n    \n},\n\n    \ndata\n()\n \n{\n\n        \nreturn\n \n{\n\n            \nhello\n:\n \n'Hello Myfirebase'\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n</\nscript\n>\n\n\n\n<\nstyle\n \nscoped\n>\n\n    \n/** My Styles **/\n\n\n</\nstyle\n>",
            "title": "Components"
        },
        {
            "location": "/routing/",
            "text": "Myfirebase is using Vuejs routes system, all routes are located in \n/src/routes/routes.js\n.\n\n\n\n\nTip\n\n\nIt's recommended to check the vue-router \ndocs\n.\n\n\n\n\nVue-router and Myfirebase\n\u00b6\n\n\nBy default, Myfirebase has some default routes already defined in \nroutes.js\n file.\n\n\n\n\n\n\nLayout.vue: which is the default layout of the application.\n\n\n\n\n\n\nWelcome.vue: which is a default welcome component.\n\n\n\n\n\n\nLogin.vue: which is responsible for authenticating users (register/login/logout) using firebase authentication.\n\n\n\n\n\n\nUpdateProfile.vue: which is responsible for updating user profile (email/password) and user avatar using firebase cloud storage.\n\n\n\n\n\n\nApp.vue: which is the default component to manipulate the firebase database.\n\n\n\n\n\n\nFirestore.vue: which is the default component to use the cloud firestore.\n\n\n\n\n\n\nimport\n \nLanding\n \nfrom\n \n'@/components/Landing'\n\n\nimport\n \nWelcome\n \nfrom\n \n'@/components/Welcome'\n\n\nimport\n \nLogin\n \nfrom\n \n'@/components/auth/Login'\n\n\nimport\n \nUpdateProfile\n \nfrom\n \n'@/components/auth/UpdateProfile'\n\n\nimport\n \nApp\n \nfrom\n \n'@/components/App'\n\n\nimport\n \nFirestore\n \nfrom\n \n\"@/components/Firestore\"\n\n\n\nimport\n \nVue\n \nfrom\n \n'vue'\n\n\n\nconst\n \nroutes\n \n=\n \n[{\n\n        \npath\n:\n \n'/'\n,\n\n        \ncomponent\n:\n \nLanding\n,\n\n        \nchildren\n:\n \n[{\n\n                \npath\n:\n \n'/'\n,\n\n                \ncomponent\n:\n \nWelcome\n,\n\n                \nname\n:\n \n'Welcome'\n\n            \n},\n\n            \n{\n\n                \npath\n:\n \n'/login'\n,\n\n                \ncomponent\n:\n \nLogin\n,\n\n                \nname\n:\n \n'login'\n\n            \n},\n\n            \n{\n\n                \npath\n:\n \n'/update-profile'\n,\n\n                \ncomponent\n:\n \nUpdateProfile\n,\n\n                \nname\n:\n \n'Profile Update'\n,\n\n                \nmeta\n:\n \n{\n\n                    \nauth\n:\n \ntrue\n\n                \n}\n\n            \n},\n\n            \n{\n\n                \npath\n:\n \n'/app'\n,\n\n                \ncomponent\n:\n \nApp\n,\n\n                \nname\n:\n \n'Main app'\n,\n\n                \nmeta\n:\n \n{\n\n                    \nauth\n:\n \ntrue\n\n                \n}\n\n            \n},\n\n            \n{\n\n                \npath\n:\n \n'/firestore'\n,\n\n                \ncomponent\n:\n \nFirestore\n.\n\n                \nname\n:\n \n'firestore'\n,\n\n                \nmeta\n:\n \n{\n\n                    \nauth\n:\n \ntrue\n\n                \n}\n\n            \n}\n\n        \n]\n\n    \n},\n\n    \n{\n\n        \npath\n:\n \n'*'\n,\n\n        \ncomponents\n:\n \nNotFound\n\n    \n}\n\n\n]\n\n\n\n\nexport\n \ndefault\n \nroutes\n;",
            "title": "Routing"
        },
        {
            "location": "/routing/#vue-router-and-myfirebase",
            "text": "By default, Myfirebase has some default routes already defined in  routes.js  file.    Layout.vue: which is the default layout of the application.    Welcome.vue: which is a default welcome component.    Login.vue: which is responsible for authenticating users (register/login/logout) using firebase authentication.    UpdateProfile.vue: which is responsible for updating user profile (email/password) and user avatar using firebase cloud storage.    App.vue: which is the default component to manipulate the firebase database.    Firestore.vue: which is the default component to use the cloud firestore.    import   Landing   from   '@/components/Landing'  import   Welcome   from   '@/components/Welcome'  import   Login   from   '@/components/auth/Login'  import   UpdateProfile   from   '@/components/auth/UpdateProfile'  import   App   from   '@/components/App'  import   Firestore   from   \"@/components/Firestore\"  import   Vue   from   'vue'  const   routes   =   [{ \n         path :   '/' , \n         component :   Landing , \n         children :   [{ \n                 path :   '/' , \n                 component :   Welcome , \n                 name :   'Welcome' \n             }, \n             { \n                 path :   '/login' , \n                 component :   Login , \n                 name :   'login' \n             }, \n             { \n                 path :   '/update-profile' , \n                 component :   UpdateProfile , \n                 name :   'Profile Update' , \n                 meta :   { \n                     auth :   true \n                 } \n             }, \n             { \n                 path :   '/app' , \n                 component :   App , \n                 name :   'Main app' , \n                 meta :   { \n                     auth :   true \n                 } \n             }, \n             { \n                 path :   '/firestore' , \n                 component :   Firestore . \n                 name :   'firestore' , \n                 meta :   { \n                     auth :   true \n                 } \n             } \n         ] \n     }, \n     { \n         path :   '*' , \n         components :   NotFound \n     }  ]  export   default   routes ;",
            "title": "Vue-router and Myfirebase"
        },
        {
            "location": "/store/",
            "text": "Myfirebase is using Vuex which is a simple scalable state management system compatible with Vuejs, all of Myfirebase states are located in \n/storage\n directory.\n\n\nStorage directory houses \nstore.js\n, \nmyfirebase-auth\n and \nmyfirebase-storage\n.\n\n\n\n\nTip\n\n\nIt's recommended to check Vuex \ndocs\n\n\n\n\nAuthentication\n and \nCloud Storage\n states are seperated from each other and splited up into modules under a namespace.\n\n\n\n\nWarning\n\n\nYou're free to add new states and mutations, but you're not allowed to change the default states/mutations such as \nMyfirebase-auth\n and \nMyfirebase-storage\n because they're used by the \nMyfirebase plugin\n.",
            "title": "State Managment System"
        },
        {
            "location": "/database/",
            "text": "Myfirebase provides a simple way to deal with the Firebase real-time database and Firestore.\n\n\nFor creating a new database model, you can run in your terminal \nmyfirebase new:model <model-name>\n.\n\n\nHow does it works?\n\u00b6\n\n\nOnce you create a new model in the project, you will see somthing like this.\n\n\nimport\n \n{\n \nFirestoreModel\n \n}\n \nfrom\n \n'myfirebase'\n\n\n\nclass\n \nPerson\n \nextends\n \nFirestoreModel\n \n{\n\n\n    \n/**\n\n\n     * Create new Person instance.\n\n\n     * \n\n\n     * @param {*} ref\n\n\n     */\n\n    \nconstructor\n \n(\nref\n)\n \n{\n\n        \nsuper\n(\nref\n)\n\n    \n}\n\n\n    \n/**\n\n\n     * Define required properties.\n\n\n     * \n\n\n     * @return array\n\n\n     */\n\n    \nrequired\n \n()\n \n{\n\n        \nreturn\n \n[]\n\n    \n}\n\n\n}\n\n\n\nexport\n \ndefault\n \nPerson\n;\n\n\n\n\n\n\nLet say we've created a new component for managing users accounts.\n\n\nIt becomes easy for us to add/remove documents to our database, we can add the Person object in Vue data property, and then initialize the Person object with the database reference which might be a real-time reference or Firestore ones, Myfirebase model binds on Person properties.\n\n\nWe can add a new record to our database by:\n\n\npush()\n - in case of using real-time database.\n\n\nadd()\n - in case of using Firestore database.\n\n\nExample:\n\n\n\n\nInfo\n\n\n1 - You need to import the model into the component.\n\n\nimport Person from \"@/models/Person\"\n\n\n2 - Then you have to initialize the model with \ninit()\n in the vue's data property.\n\n\ndata: () => {\n    Person: new Person(database_ref).init()\n  }\n \n\n\n\n\n<\ntemplate\n>\n\n  \n<\ndiv\n>\n\n    \n<\nv-card\n>\n\n      \n<\nv-list\n \ntwo-line\n \nsubheader\n>\n\n        \n<\nv-subheader\n>\nPersons\n</\nv-subheader\n>\n\n        \n<\nv-list-tile\n \nv-for\n=\n\"(person, index) in data\"\n \n:key\n=\n\"index\"\n>\n\n          \n<\nv-list-tile-content\n>\n\n            \n<\nv-list-tile-title\n>\n{{person.name}}\n</\nv-list-tile-title\n>\n\n          \n</\nv-list-tile-content\n>\n\n          \n<\nv-list-tile-action\n>\n\n            \n<\nv-icon\n \ncolor\n=\n\"black\"\n \n@\nclick\n=\n\"deletePerson(person['.key'])\"\n>\ndelete\n</\nv-icon\n>\n\n          \n</\nv-list-tile-action\n>\n\n        \n</\nv-list-tile\n>\n\n      \n</\nv-list\n>\n\n      \n<\nv-container\n>\n\n      \n<\nv-text-field\n\n      \nlabel\n=\n\"Person Name\"\n\n      \nv-model\n=\n\"Person.name\"\n\n      \n@\nkeyup\n.\nenter\n=\n\"addPerson()\"\n\n      \n></\nv-text-field\n>\n\n      \n<\nv-btn\n \n@\nclick\n=\n\"addPerson()\"\n>\nAdd Person\n</\nv-btn\n>\n\n      \n</\nv-container\n>\n\n    \n</\nv-card\n>\n\n    \n</\ndiv\n>\n\n  \n</\ndiv\n>\n\n\n</\ntemplate\n>\n\n\n\n<\nscript\n>\n\n\n\nimport\n \nPerson\n \nfrom\n \n\"@/models/Person\"\n;\n\n\n\nexport\n \ndefault\n \n{\n\n  \nmounted\n \n()\n \n{\n\n      \n//\n\n  \n},\n\n  \nfirebase\n \n()\n \n{\n\n    \nreturn\n \n{\n\n      \ndata\n:\n \n{\n\n        \nsource\n:\n \nthis\n.\n$store\n.\nstate\n.\ndatabase\n.\nchild\n(\n\"persons\"\n),\n\n        \nreadyCallback\n:\n \n()\n \n=>\n \n{\n\n        \n}\n\n      \n}\n\n    \n};\n\n  \n},\n\n  \ndata\n \n()\n \n{\n\n    \nreturn\n \n{\n\n        \n// init the Person's db model.\n\n      \nPerson\n:\n \nnew\n \nPerson\n(\nthis\n.\n$store\n.\nstate\n.\ndatabase\n.\nchild\n(\n'persons'\n)).\ninit\n(),\n\n    \n}\n\n  \n},\n\n  \nmethods\n:\n \n{\n\n    \naddPerson\n \n()\n \n{\n\n        \n// The record added automatically.\n\n      \nthis\n.\nPerson\n.\npush\n()\n\n    \n},\n\n    \ndeletePerson\n \n(\nkey\n)\n \n{\n\n      \nthis\n.\nPerson\n.\nremove\n(\nkey\n);\n\n    \n}\n\n  \n}\n\n\n};\n\n\n</\nscript\n>\n\n\n\n\n\n\nYou can also update or remove a document from the database.\n\n\nExample:\n\n\n// delete document.\n\n\nthis\n.\nPerson\n.\ndelete\n(\nkey\n)\n\n\n\n// update document\n\n\nthis\n.\nPerson\n.\nupdate\n(\nkey\n)\n\n\n\n\n\n\nAPI\n\u00b6\n\n\nFirebase database.\n\u00b6\n\n\nAdd JSON document.\n\n\nSyntax: model.push()\nreturn: Promise\n\n\n\n\n\nDelete JSON document.\n\n\nSyntax: model.remove(document_key)\nreturn: Promise\n\n\n\n\n\nUpdate JSON document.\n\n\nSyntax: model.update(document_key)\nreturn: Promise\n\n\n\n\n\nCloud Firestore.\n\u00b6\n\n\nAdd JSON document.\n\n\nSyntax: model.add()\nreturn: Promise\n\n\n\n\n\nDelete JSON document.\n\n\nSyntax: model.delete(document_key)\nreturn: Promise\n\n\n\n\n\nUpdate JSON document.\n\n\nSyntax: model.update(document_key)\nreturn: Promise",
            "title": "Realtime Database and Cloud Firestore"
        },
        {
            "location": "/database/#how-does-it-works",
            "text": "Once you create a new model in the project, you will see somthing like this.  import   {   FirestoreModel   }   from   'myfirebase'  class   Person   extends   FirestoreModel   { \n\n     /**       * Create new Person instance.       *        * @param {*} ref       */ \n     constructor   ( ref )   { \n         super ( ref ) \n     } \n\n     /**       * Define required properties.       *        * @return array       */ \n     required   ()   { \n         return   [] \n     }  }  export   default   Person ;   Let say we've created a new component for managing users accounts.  It becomes easy for us to add/remove documents to our database, we can add the Person object in Vue data property, and then initialize the Person object with the database reference which might be a real-time reference or Firestore ones, Myfirebase model binds on Person properties.  We can add a new record to our database by:  push()  - in case of using real-time database.  add()  - in case of using Firestore database.  Example:   Info  1 - You need to import the model into the component.  import Person from \"@/models/Person\"  2 - Then you have to initialize the model with  init()  in the vue's data property.  data: () => {\n    Person: new Person(database_ref).init()\n  }     < template > \n   < div > \n     < v-card > \n       < v-list   two-line   subheader > \n         < v-subheader > Persons </ v-subheader > \n         < v-list-tile   v-for = \"(person, index) in data\"   :key = \"index\" > \n           < v-list-tile-content > \n             < v-list-tile-title > {{person.name}} </ v-list-tile-title > \n           </ v-list-tile-content > \n           < v-list-tile-action > \n             < v-icon   color = \"black\"   @ click = \"deletePerson(person['.key'])\" > delete </ v-icon > \n           </ v-list-tile-action > \n         </ v-list-tile > \n       </ v-list > \n       < v-container > \n       < v-text-field \n       label = \"Person Name\" \n       v-model = \"Person.name\" \n       @ keyup . enter = \"addPerson()\" \n       ></ v-text-field > \n       < v-btn   @ click = \"addPerson()\" > Add Person </ v-btn > \n       </ v-container > \n     </ v-card > \n     </ div > \n   </ div >  </ template >  < script >  import   Person   from   \"@/models/Person\" ;  export   default   { \n   mounted   ()   { \n       // \n   }, \n   firebase   ()   { \n     return   { \n       data :   { \n         source :   this . $store . state . database . child ( \"persons\" ), \n         readyCallback :   ()   =>   { \n         } \n       } \n     }; \n   }, \n   data   ()   { \n     return   { \n         // init the Person's db model. \n       Person :   new   Person ( this . $store . state . database . child ( 'persons' )). init (), \n     } \n   }, \n   methods :   { \n     addPerson   ()   { \n         // The record added automatically. \n       this . Person . push () \n     }, \n     deletePerson   ( key )   { \n       this . Person . remove ( key ); \n     } \n   }  };  </ script >   You can also update or remove a document from the database.  Example:  // delete document.  this . Person . delete ( key )  // update document  this . Person . update ( key )",
            "title": "How does it works?"
        },
        {
            "location": "/database/#api",
            "text": "",
            "title": "API"
        },
        {
            "location": "/database/#firebase-database",
            "text": "Add JSON document.  Syntax: model.push()\nreturn: Promise  Delete JSON document.  Syntax: model.remove(document_key)\nreturn: Promise  Update JSON document.  Syntax: model.update(document_key)\nreturn: Promise",
            "title": "Firebase database."
        },
        {
            "location": "/database/#cloud-firestore",
            "text": "Add JSON document.  Syntax: model.add()\nreturn: Promise  Delete JSON document.  Syntax: model.delete(document_key)\nreturn: Promise  Update JSON document.  Syntax: model.update(document_key)\nreturn: Promise",
            "title": "Cloud Firestore."
        },
        {
            "location": "/style/",
            "text": "Myfirebase ships with the \nVuetify\n to build well-crafted apps with Material Design and Vue 2, that makes working with material-design and JavaScript a joy.\n\n\nDefine global styles\n\u00b6\n\n\nAs you may know, Myfrebase has a default SASS/SCSS file located in \n/src/assets/sass/app.scss\n, this file contains all \nVuetify\n SASS dependencies, you're free to choose whatever you want to work with, this file is compiled down via webpack automatically and injected into \nindex.html\n while running \nnpm run build\n or \nnpm run dev\n.\n\n\n/* Fonts */\n\n\n\n@\nimport\n \nurl\n(\nhttps\n://\nfonts\n.\ngoogleapis\n.\ncom\n/\nicon\n?\nfamily\n=\nMaterial\n+\nIcons\n)\n;\n\n\n\n/* Variables */\n\n\n\n\n/* @import \"variables\"; */\n\n\n\n\n/* Vuetify css*/\n\n\n\n@\nimport\n \n'~vuetify/dist/vuetify.css'\n;\n\n\n\n/*Global css*/\n\n\n\n.\npush-down\n \n{\n\n    \nmargin-top\n:\n \n15\npx\n;\n\n\n}\n\n\n\n.\ncontainer\n \n{\n\n    \nmargin-top\n:\n \n15\npx\n;\n\n\n}\n\n\n\n.\noverlay\n \n{\n\n    \nz-index\n:\n \n9000\n;\n\n    \nposition\n:\n \nfixed\n;\n\n    \ntop\n:\n \n0\n;\n\n    \nbottom\n:\n \n0\n;\n\n    \nleft\n:\n \n0\n;\n\n    \nright\n:\n \n0\n;\n\n    \nbackground\n:\n \nrgba\n(\n0\n,\n \n0\n,\n \n0\n,\n \n0.7\n);\n\n    \ntransition\n:\n \nopacity\n \n500\nms\n;\n\n    \nvisibility\n:\n \nvisible\n;\n\n    \nopacity\n:\n \n1\n;\n\n\n}\n\n\n\n.\nflex-spinner\n \n{\n\n    \nheight\n:\n \n500\npx\n;\n\n    \ndisplay\n:\n \nflex\n;\n\n    \nalign-items\n:\n \ncenter\n;\n\n    \njustify-content\n:\n \ncenter\n;\n\n\n}\n\n\n\n\n\n\n.flex-spinner\n and \n.overlay\n class will be triggered globally in your application so you can start using them in every single component you create.\n\n\n\n\nTip\n\n\nNot familiar with material design? you're free to choose whatever type of CSS frameworks you want to work with such as bootstrap or Bulma.",
            "title": "Material design and SASS/SCSS"
        },
        {
            "location": "/style/#define-global-styles",
            "text": "As you may know, Myfrebase has a default SASS/SCSS file located in  /src/assets/sass/app.scss , this file contains all  Vuetify  SASS dependencies, you're free to choose whatever you want to work with, this file is compiled down via webpack automatically and injected into  index.html  while running  npm run build  or  npm run dev .  /* Fonts */  @ import   url ( https :// fonts . googleapis . com / icon ? family = Material + Icons ) ;  /* Variables */  /* @import \"variables\"; */  /* Vuetify css*/  @ import   '~vuetify/dist/vuetify.css' ;  /*Global css*/  . push-down   { \n     margin-top :   15 px ;  }  . container   { \n     margin-top :   15 px ;  }  . overlay   { \n     z-index :   9000 ; \n     position :   fixed ; \n     top :   0 ; \n     bottom :   0 ; \n     left :   0 ; \n     right :   0 ; \n     background :   rgba ( 0 ,   0 ,   0 ,   0.7 ); \n     transition :   opacity   500 ms ; \n     visibility :   visible ; \n     opacity :   1 ;  }  . flex-spinner   { \n     height :   500 px ; \n     display :   flex ; \n     align-items :   center ; \n     justify-content :   center ;  }   .flex-spinner  and  .overlay  class will be triggered globally in your application so you can start using them in every single component you create.   Tip  Not familiar with material design? you're free to choose whatever type of CSS frameworks you want to work with such as bootstrap or Bulma.",
            "title": "Define global styles"
        },
        {
            "location": "/authentication/",
            "text": "Tip\n\n\nIt's recommended to take a look at the firebase authentication docs, please check the following link\nfirebase auth docs\n.\n\n\n\n\nHow hard it is to integrate \nFirebase auth\n to your web project especially when you try to structure and organize firebase auth globally to be used through all your \nVue components\n.\n\n\nThanks to \nMyfirebase auth system\n it makes firebase auth easier to be managed using \nVuex\n, its injected and triggered at beginning of the Vue instance.\n\n\n\n\n\nAuth instance\n\u00b6\n\n\nSyntax : \n$auth\n\n\n$auth\n is a global auth instance which is called through the Vue component.\n\n\nExample\n\u00b6\n\n\n<\ntemplate\n>\n\n    \n<\ndiv\n \nclass \n=\n \n\"container\"\n>\n\n        \n<!-- display result -->\n\n        User Name : {{userName}}\n        Email :     {{userEmail}}\n    \n</\ndiv\n>\n\n\n<\ntemplate\n>\n\n\n\n<\nscript\n>\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n \n()\n \n{\n\n            \n// retrieve username.\n\n            \nthis\n.\nuserName\n \n=\n \nthis\n.\n$auth\n.\nuser\n().\ndisplayName\n\n            \n// retrieve user email.\n\n            \nthis\n.\nuserEmail\n \n=\n \nthis\n.\n$auth\n.\nuser\n().\nemail\n\n        \n},\n\n        \ndata\n \n()\n \n{\n\n            \nreturn\n \n{\n\n                \nuserName\n:\n \n''\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n</\nscript\n>\n\n\n\n\n\n\nBasically \n$auth\n instance is your key to get access and manage \nfirebase auth\n.\n\n\n\n\n\nGet Firebase Auth Module\n\u00b6\n\n\nTo retrieve firebase auth module.\n\n\nSyntax : \n$auth.getAuth()\n\n\n\n\n\nGet current user\n\u00b6\n\n\nYou can get the current signed in user by calling global auth instance.\n\n\nSyntax : \n$auth.getUser()\n\n\nExample\n\u00b6\n\n\n<\nscript\n>\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n \n()\n \n{\n\n            \n// get current user\n\n            \nlet\n \nuser\n \n=\n \nthis\n.\n$auth\n.\ngetUser\n()\n\n            \n// get email\n\n            \nconsole\n.\nlog\n(\nuser\n.\nemail\n)\n\n            \n// get username\n\n            \nconsole\n.\nlog\n(\nuser\n.\ndisplayName\n)\n\n        \n}\n\n    \n}\n\n\n</\nscript\n>\n\n\n\n\n\n\n\n\n\nUpdate Profile Picture\n\u00b6\n\n\nYou can update profile avatar usign \nupdateProfilePicture(object)\n method, this will update the default firebase user \nprofileURL\n.\n\n\n\n\nTip\n\n\nBefore you start updating profile pictures, make sure that you have uploaded that picture to firebase storage, and got photoURL, see \nUpload a file with Myfirebase\n.\n\n\n\n\nSyntax : \n$auth.updateProfilePicture(String)\n\nReturn : \nPromise\n\n\nExample\n\u00b6\n\n\n<\nscript\n>\n\n    \nexport\n \ndefault\n \n{\n\n        \ndata\n \n()\n \n{\n\n            \nreturn\n \n{\n\n                \n// link to profile photo\n\n                \npicture\n:\n \n'https://link-to-photo.test/profile.png'\n\n            \n}\n\n        \n},\n\n        \nmethods\n:\n \n{\n\n            \n// update profile picture\n\n            \nupdateProfilePicture\n \n()\n \n{\n\n                \nthis\n.\n$auth\n.\nupdateProfilePicture\n(\nthis\n.\npicture\n)\n\n                \n.\nthen\n(()\n \n=>\n \n{\n\n                    \n// updated\n\n                \n}).\ncatch\n((\nerror\n)\n \n=>\n \n{\n\n                    \n// error\n\n                \n})\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n</\nscript\n>\n\n\n\n\n\n\n\n\n\nAuth state\n\u00b6\n\n\nSyntax : \n$auth.state(String, String)\n\nReturn : \nPromise\n\n\nConsider it just like an auth middleware where you can check if the user is signed in or not, you can also redirect the user to another component if he is not signed in.\n\n\nExample\n\u00b6\n\n\n<\ntemplate\n>\n\n    \n<\ndiv\n \nclass \n=\n \n\"container\"\n>\n\n        \n<!-- display result -->\n\n        User Name : {{userName}}\n    \n</\ndiv\n>\n\n\n<\ntemplate\n>\n\n\n\n<\nscript\n>\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n \n()\n \n{\n\n            \n// Check if the user signed in with redirection.\n\n            \nthis\n.\n$auth\n.\nstate\n(\n'/app'\n,\n \n'/login'\n)\n\n            \n.\nthen\n((\nuser\n)\n \n=>\n \n{\n\n                \nthis\n.\nuserName\n \n=\n \nuser\n.\ndisplayName\n\n            \n}).\ncatch\n(\nerror\n \n=>\n \n{\n\n                \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n            \n})\n\n        \n},\n\n        \ndata\n \n()\n \n{\n\n            \nreturn\n \n{\n\n                \nuserName\n:\n \n''\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n</\nscript\n>\n\n\n\n\n\n\n\n\n\nAuth check\n\u00b6\n\n\nIt's the same as \nauth state\n but without redirection.\n\n\nSyntax : \n$auth.check()\n\nReturn : \nPromise\n\n\nExample\n\u00b6\n\n\n<\ntemplate\n>\n\n    \n<\nul\n \nclass\n=\n\"nav navbar-nav navbar-right\"\n>\n\n        \n<\nli\n \nv-if \n=\n \n\"signed\"\n \nclass\n=\n\"\"\n>\n\n            \n<\na\n \nhref\n=\n\"#\"\n>\n{{userName}}\n</\na\n>\n\n            \n<\nul\n \nclass\n=\n\"dropdown-menu\"\n>\n\n                \n<\nli\n>\n>Logout\n</\na\n></\nli\n>\n\n            \n</\nul\n>\n\n        \n</\nli\n>\n\n    \n</\nul\n>\n\n\n<\ntemplate\n>\n\n\n\n<\nscript\n>\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n \n()\n \n{\n\n            \n// Check if the user signed in without redirection. \n\n            \nthis\n.\n$auth\n.\ncheck\n()\n\n            \n.\nthen\n((\nuser\n)\n \n=>\n \n{\n\n                \nthis\n.\nsigned\n \n=\n \ntrue\n\n                \nthis\n.\nuserName\n \n=\n \nuser\n.\ndisplayName\n\n            \n}).\ncatch\n((\nerror\n)\n \n=>\n \n{\n\n                \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n            \n})\n\n        \n},\n\n        \ndata\n \n()\n \n{\n\n            \nreturn\n \n{\n\n                \nuserName\n:\n \n''\n,\n\n                \nsigned\n:\n \nfalse\n,\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n</\nscript\n>\n\n\n\n\n\n\n\n\n\nSignup with email and password\n\u00b6\n\n\nTo register a new user with an email and password.\n\n\nSynax : \n$auth.registerWithEmailAndPassword()\n\nReturn : \nPromise\n\n\nExample\n\u00b6\n\n\n<\ntemplate\n>\n\n    \n<\ndiv\n \nclass \n=\n \n\"register\"\n>\n\n        \n<\ninput\n \ntype\n=\n\"text\"\n \nv-mode\n=\n\"email\"\n>\n\n        \n<\ninput\n \ntype\n=\n\"password\"\n \nv-model\n=\n\"password\"\n>\n\n        \n<\nbutton\n \n@\nclick\n=\n\"register\"\n></\nbutton\n>\n\n    \n</\ndiv\n>\n\n\n<\ntemplate\n>\n\n\n\n<\nscript\n>\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n \n()\n \n{\n\n            \n// Check if the user signed in with redirection. \n\n            \nthis\n.\n$auth\n.\nstate\n(\n'/app'\n,\n \n'/login'\n)\n\n            \n.\nthen\n((\nuser\n)\n \n=>\n \n{\n\n                \n// user signed-in\n\n            \n}).\ncatch\n(\nerror\n \n=>\n \n{\n\n                \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n            \n})\n\n        \n},\n\n        \ndata\n \n()\n \n{\n\n            \nreturn\n \n{\n\n                \nemail\n:\n \n''\n,\n\n                \npassword\n:\n \n''\n,\n\n            \n}\n\n        \n},\n\n        \nmethods\n:\n \n{\n\n            \nregisterWithEmailAndPassword\n \n()\n \n{\n\n                \nthis\n.\n$auth\n.\nregisterWithEmailAndPassword\n(\nthis\n.\neamil\n,\n \nthis\n.\npassword\n)\n\n                \n.\nthen\n((\nuser\n)\n \n=>\n \n{\n\n                    \nconsole\n.\nlog\n(\n`User Email : \n${\nuser\n.\nemail\n}\n`\n)\n\n                \n}).\ncatch\n(\nerror\n \n=>\n \n{\n\n                    \n// error\n\n                \n})\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n</\nscript\n>\n\n\n\n\n\n\n\n\n\nSignIn with email and password\n\u00b6\n\n\nTo sign in a user with an email and passowrd.\n\n\nSyntax : \n$auth.loginWithEmailAndPassword(String, String)\n\nReturn : \nPromise\n\n\nExample\n\u00b6\n\n\n<\ntemplate\n>\n\n    \n<\ndiv\n \nclass \n=\n \n\"register\"\n>\n\n        \n<\ninput\n \ntype\n=\n\"text\"\n \nv-mode\n=\n\"email\"\n>\n\n        \n<\ninput\n \ntype\n=\n\"password\"\n \nv-model\n=\n\"password\"\n>\n\n        \n<\nbutton\n \n@\nclick\n=\n\"loginWithEmailAndPassword\"\n></\nbutton\n>\n\n    \n</\ndiv\n>\n\n\n<\ntemplate\n>\n\n\n\n<\nscript\n>\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n \n()\n \n{\n\n            \n// Check if the user signed in with redirection. \n\n            \nthis\n.\n$auth\n.\nstate\n(\n'/app'\n,\n \n'/login'\n)\n\n            \n.\nthen\n((\nuser\n)\n \n=>\n \n{\n\n                \n// user signed-in\n\n            \n}).\ncatch\n(\nerror\n \n=>\n \n{\n\n                \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n            \n})\n\n        \n},\n\n        \ndata\n \n()\n \n{\n\n            \nreturn\n \n{\n\n                \nemail\n:\n \n''\n,\n\n                \npassword\n:\n \n''\n,\n\n            \n}\n\n        \n},\n\n        \nmethods\n:\n \n{\n\n            \nloginWithEmailAndPassword\n \n()\n \n{\n\n                \n// login with email and password\n\n                \nthis\n.\n$auth\n.\nloginWithEmailAndPassword\n(\nthis\n.\nemail\n,\n \nthis\n.\npassword\n)\n\n                \n.\nthen\n((\nuser\n)\n \n=>\n \n{\n\n                    \nconsole\n.\nlog\n(\nuser\n.\nemail\n)\n\n                \n}).\ncatch\n((\nerror\n)\n \n=>\n \n{\n\n                    \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                \n})\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n</\nscript\n>\n\n\n\n\n\n\n\n\n\nSignIn with google\n\u00b6\n\n\nAllow users to authenticate to Firebase using their \nGoogle accounts\n.\n\n\nSyntax : \n$auth.signInWithGoogle()\n\nReturn : \nPromise\n\n\nExample\n\u00b6\n\n\n<\ntemplate\n>\n\n    \n<\ndiv\n \nclass \n=\n \n\"register\"\n>\n\n        \n<\nh3\n>\nSignIn using google account\n</\nh3\n>\n\n        \n<\nbutton\n \n@\nclick\n=\n\"signInWithGoogle\"\n>\nUsing google\n</\nbutton\n>\n\n    \n</\ndiv\n>\n\n\n<\ntemplate\n>\n\n\n\n<\nscript\n>\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n \n()\n \n{\n\n            \n// Check if the user signed in with redirection. \n\n            \nthis\n.\n$auth\n.\nstate\n(\n'/app'\n,\n \n'/login'\n)\n\n            \n.\nthen\n((\nuser\n)\n \n=>\n \n{\n\n                \n// user signed-in\n\n            \n}).\ncatch\n(\nerror\n \n=>\n \n{\n\n                \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n            \n})\n\n        \n},\n\n        \ndata\n \n()\n \n{\n\n            \nreturn\n \n{\n\n            \n}\n\n        \n},\n\n        \nmethods\n:\n \n{\n\n            \nsignInWithGoogle\n \n()\n \n{\n\n                \n// SignIn with google\n\n                \nthis\n.\n$auth\n.\nsignInWithGoogle\n()\n\n                \n.\nthen\n(\nuser\n \n=>\n \n{\n\n                    \nconsole\n.\nlog\n(\nuser\n.\nemail\n)\n\n                \n}).\ncatch\n(\nerror\n \n=>\n \n{\n\n                    \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                \n})\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n</\nscript\n>\n\n\n\n\n\n\n\n\n\nSignIn with Facebook\n\u00b6\n\n\nAllow users to authenticate to Firebase using their \nFacebook Accounts\n.\n\n\nSyntax : \n$auth.signInWithFacebook()\n\nReturn : \nPromise\n\n\n\n\n\nSignIn with Twitter\n\u00b6\n\n\nAllow users to authenticate to Firebase using their \nTwitter Accounts\n.\n\n\nSyntax : \n$auth.signInWithTwitter()\n\nReturn : \nPromise\n\n\n\n\n\nSignIn with Github\n\u00b6\n\n\nAllow users to authenticate to Firebase using their \nGithub Accounts\n.\n\n\nSyntax : \n$auth.signInWithGithub()\n\nReturn : \nPromise\n\n\n\n\n\nSignOut\n\u00b6\n\n\nTo sign out a user, call \nlogout\n.\n\n\nSyntax : \n$auth.logout()\n\nReturn : \nPromise",
            "title": "Authentication"
        },
        {
            "location": "/authentication/#auth-instance",
            "text": "Syntax :  $auth  $auth  is a global auth instance which is called through the Vue component.",
            "title": "Auth instance"
        },
        {
            "location": "/authentication/#example",
            "text": "< template > \n     < div   class  =   \"container\" > \n         <!-- display result --> \n        User Name : {{userName}}\n        Email :     {{userEmail}}\n     </ div >  < template >  < script > \n     export   default   { \n         mounted   ()   { \n             // retrieve username. \n             this . userName   =   this . $auth . user (). displayName \n             // retrieve user email. \n             this . userEmail   =   this . $auth . user (). email \n         }, \n         data   ()   { \n             return   { \n                 userName :   '' \n             } \n         } \n     }  </ script >   Basically  $auth  instance is your key to get access and manage  firebase auth .",
            "title": "Example"
        },
        {
            "location": "/authentication/#get-firebase-auth-module",
            "text": "To retrieve firebase auth module.  Syntax :  $auth.getAuth()",
            "title": "Get Firebase Auth Module"
        },
        {
            "location": "/authentication/#get-current-user",
            "text": "You can get the current signed in user by calling global auth instance.  Syntax :  $auth.getUser()",
            "title": "Get current user"
        },
        {
            "location": "/authentication/#example_1",
            "text": "< script > \n     export   default   { \n         mounted   ()   { \n             // get current user \n             let   user   =   this . $auth . getUser () \n             // get email \n             console . log ( user . email ) \n             // get username \n             console . log ( user . displayName ) \n         } \n     }  </ script >",
            "title": "Example"
        },
        {
            "location": "/authentication/#update-profile-picture",
            "text": "You can update profile avatar usign  updateProfilePicture(object)  method, this will update the default firebase user  profileURL .   Tip  Before you start updating profile pictures, make sure that you have uploaded that picture to firebase storage, and got photoURL, see  Upload a file with Myfirebase .   Syntax :  $auth.updateProfilePicture(String) \nReturn :  Promise",
            "title": "Update Profile Picture"
        },
        {
            "location": "/authentication/#example_2",
            "text": "< script > \n     export   default   { \n         data   ()   { \n             return   { \n                 // link to profile photo \n                 picture :   'https://link-to-photo.test/profile.png' \n             } \n         }, \n         methods :   { \n             // update profile picture \n             updateProfilePicture   ()   { \n                 this . $auth . updateProfilePicture ( this . picture ) \n                 . then (()   =>   { \n                     // updated \n                 }). catch (( error )   =>   { \n                     // error \n                 }) \n             } \n         } \n     }  </ script >",
            "title": "Example"
        },
        {
            "location": "/authentication/#auth-state",
            "text": "Syntax :  $auth.state(String, String) \nReturn :  Promise  Consider it just like an auth middleware where you can check if the user is signed in or not, you can also redirect the user to another component if he is not signed in.",
            "title": "Auth state"
        },
        {
            "location": "/authentication/#example_3",
            "text": "< template > \n     < div   class  =   \"container\" > \n         <!-- display result --> \n        User Name : {{userName}}\n     </ div >  < template >  < script > \n     export   default   { \n         mounted   ()   { \n             // Check if the user signed in with redirection. \n             this . $auth . state ( '/app' ,   '/login' ) \n             . then (( user )   =>   { \n                 this . userName   =   user . displayName \n             }). catch ( error   =>   { \n                 console . log ( error . message ) \n             }) \n         }, \n         data   ()   { \n             return   { \n                 userName :   '' \n             } \n         } \n     }  </ script >",
            "title": "Example"
        },
        {
            "location": "/authentication/#auth-check",
            "text": "It's the same as  auth state  but without redirection.  Syntax :  $auth.check() \nReturn :  Promise",
            "title": "Auth check"
        },
        {
            "location": "/authentication/#example_4",
            "text": "< template > \n     < ul   class = \"nav navbar-nav navbar-right\" > \n         < li   v-if  =   \"signed\"   class = \"\" > \n             < a   href = \"#\" > {{userName}} </ a > \n             < ul   class = \"dropdown-menu\" > \n                 < li > >Logout </ a ></ li > \n             </ ul > \n         </ li > \n     </ ul >  < template >  < script > \n     export   default   { \n         mounted   ()   { \n             // Check if the user signed in without redirection.  \n             this . $auth . check () \n             . then (( user )   =>   { \n                 this . signed   =   true \n                 this . userName   =   user . displayName \n             }). catch (( error )   =>   { \n                 console . log ( error . message ) \n             }) \n         }, \n         data   ()   { \n             return   { \n                 userName :   '' , \n                 signed :   false , \n             } \n         } \n     }  </ script >",
            "title": "Example"
        },
        {
            "location": "/authentication/#signup-with-email-and-password",
            "text": "To register a new user with an email and password.  Synax :  $auth.registerWithEmailAndPassword() \nReturn :  Promise",
            "title": "Signup with email and password"
        },
        {
            "location": "/authentication/#example_5",
            "text": "< template > \n     < div   class  =   \"register\" > \n         < input   type = \"text\"   v-mode = \"email\" > \n         < input   type = \"password\"   v-model = \"password\" > \n         < button   @ click = \"register\" ></ button > \n     </ div >  < template >  < script > \n     export   default   { \n         mounted   ()   { \n             // Check if the user signed in with redirection.  \n             this . $auth . state ( '/app' ,   '/login' ) \n             . then (( user )   =>   { \n                 // user signed-in \n             }). catch ( error   =>   { \n                 console . log ( error . message ) \n             }) \n         }, \n         data   ()   { \n             return   { \n                 email :   '' , \n                 password :   '' , \n             } \n         }, \n         methods :   { \n             registerWithEmailAndPassword   ()   { \n                 this . $auth . registerWithEmailAndPassword ( this . eamil ,   this . password ) \n                 . then (( user )   =>   { \n                     console . log ( `User Email :  ${ user . email } ` ) \n                 }). catch ( error   =>   { \n                     // error \n                 }) \n             } \n         } \n     }  </ script >",
            "title": "Example"
        },
        {
            "location": "/authentication/#signin-with-email-and-password",
            "text": "To sign in a user with an email and passowrd.  Syntax :  $auth.loginWithEmailAndPassword(String, String) \nReturn :  Promise",
            "title": "SignIn with email and password"
        },
        {
            "location": "/authentication/#example_6",
            "text": "< template > \n     < div   class  =   \"register\" > \n         < input   type = \"text\"   v-mode = \"email\" > \n         < input   type = \"password\"   v-model = \"password\" > \n         < button   @ click = \"loginWithEmailAndPassword\" ></ button > \n     </ div >  < template >  < script > \n     export   default   { \n         mounted   ()   { \n             // Check if the user signed in with redirection.  \n             this . $auth . state ( '/app' ,   '/login' ) \n             . then (( user )   =>   { \n                 // user signed-in \n             }). catch ( error   =>   { \n                 console . log ( error . message ) \n             }) \n         }, \n         data   ()   { \n             return   { \n                 email :   '' , \n                 password :   '' , \n             } \n         }, \n         methods :   { \n             loginWithEmailAndPassword   ()   { \n                 // login with email and password \n                 this . $auth . loginWithEmailAndPassword ( this . email ,   this . password ) \n                 . then (( user )   =>   { \n                     console . log ( user . email ) \n                 }). catch (( error )   =>   { \n                     console . log ( error . message ) \n                 }) \n             } \n         } \n     }  </ script >",
            "title": "Example"
        },
        {
            "location": "/authentication/#signin-with-google",
            "text": "Allow users to authenticate to Firebase using their  Google accounts .  Syntax :  $auth.signInWithGoogle() \nReturn :  Promise",
            "title": "SignIn with google"
        },
        {
            "location": "/authentication/#example_7",
            "text": "< template > \n     < div   class  =   \"register\" > \n         < h3 > SignIn using google account </ h3 > \n         < button   @ click = \"signInWithGoogle\" > Using google </ button > \n     </ div >  < template >  < script > \n     export   default   { \n         mounted   ()   { \n             // Check if the user signed in with redirection.  \n             this . $auth . state ( '/app' ,   '/login' ) \n             . then (( user )   =>   { \n                 // user signed-in \n             }). catch ( error   =>   { \n                 console . log ( error . message ) \n             }) \n         }, \n         data   ()   { \n             return   { \n             } \n         }, \n         methods :   { \n             signInWithGoogle   ()   { \n                 // SignIn with google \n                 this . $auth . signInWithGoogle () \n                 . then ( user   =>   { \n                     console . log ( user . email ) \n                 }). catch ( error   =>   { \n                     console . log ( error . message ) \n                 }) \n             } \n         } \n     }  </ script >",
            "title": "Example"
        },
        {
            "location": "/authentication/#signin-with-facebook",
            "text": "Allow users to authenticate to Firebase using their  Facebook Accounts .  Syntax :  $auth.signInWithFacebook() \nReturn :  Promise",
            "title": "SignIn with Facebook"
        },
        {
            "location": "/authentication/#signin-with-twitter",
            "text": "Allow users to authenticate to Firebase using their  Twitter Accounts .  Syntax :  $auth.signInWithTwitter() \nReturn :  Promise",
            "title": "SignIn with Twitter"
        },
        {
            "location": "/authentication/#signin-with-github",
            "text": "Allow users to authenticate to Firebase using their  Github Accounts .  Syntax :  $auth.signInWithGithub() \nReturn :  Promise",
            "title": "SignIn with Github"
        },
        {
            "location": "/authentication/#signout",
            "text": "To sign out a user, call  logout .  Syntax :  $auth.logout() \nReturn :  Promise",
            "title": "SignOut"
        },
        {
            "location": "/storage/",
            "text": "Tip\n\n\nIt's recommended to take a look at the firebase storage docs, please check the following link \nfirebase storage docs\n.\n\n\n\n\nMyfirebase provides a simple way to interact with firebase storage via a global instance called \n$storage\n.\n\n\nMyfirebase Storage instance\n\u00b6\n\n\nSyntax : \n$storage\n\n\n$auth\n is a global auth instance which called through the Vue component.\n\n\n\n\n\nGet firebase storage instance\n\u00b6\n\n\nSyntax : \n$storage.get()\n\n\nYou can retrieve firebase storage object using \nget()\n method.\n\n\n\n\n\nGet File URL\n\u00b6\n\n\nSyntax : \n$storage.getDownloadURL(object)\n\n\nYou can get the file URL of the user avatar or document which stored through firebase storage using \ngetDownloadURL\n.\n\n\nExample\n\u00b6\n\n\n<\ntemplate\n>\n\n    \n<\ndiv\n \nclass \n=\n \n\"container\"\n>\n\n        \n<\nimg\n \n:src\n=\n\"avatar\"\n \nalt\n=\n\"user-avatar\"\n \n/>\n\n    \n</\ndiv\n>\n\n\n</\ntemplate\n>\n\n\n<\nscript\n>\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n()\n \n{\n\n            \n// Get file URL from firebase storage\n\n            \nthis\n.\n$storage\n.\ngetDownloadURL\n({\n\n                \nref\n:\n \n\"images/default.png\"\n,\n\n                \nresult\n:\n \n(\nresult\n)\n \n=>\n \n{\n\n                    \nthis\n.\navatar\n \n=\n \nresult\n\n                \n},\n\n                \nerror\n:\n \n(\nerror\n)\n \n=>\n \n{\n\n                    \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                \n}\n\n            \n})\n\n        \n},\n\n        \ndata\n()\n \n{\n\n            \nreturn\n \n{\n\n                \navatar\n:\n \n\"\"\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n</\nscript\n>\n\n\n\n\n\n\n\n\n\nUpload file\n\u00b6\n\n\nSytax : \n$storage.upload(object)\n\n\nYou can upload a file to firebase cloud storage using \nupload(object)\n.\n\n\nExample\n\u00b6\n\n\nWe are going to upload a new file to the server using upload method.\n\n\n<\ntemplate\n>\n\n    \n<\ndiv\n \nclass \n=\n \n\"container\"\n>\n\n        \n<\nlabel\n \nclass\n=\n\"btn btn-default\"\n>\n\n            \n<\ninput\n \ntype\n=\n\"file\"\n \nclass\n=\n\"hidden\"\n \n@\nchange\n=\n\"getFile\"\n>\n\n            Browse\n        \n</\nlabel\n>\n\n        \n<\nbutton\n \nclass\n=\n\"btn btn-primary\"\n \n@\nclick\n=\n\"uploadAvatar()\"\n>\n update\n</\ni\n></\nbutton\n>\n\n    \n</\ndiv\n>\n\n\n</\ntemplate\n>\n\n\n\n<\nscript\n>\n\n    \nexport\n \ndefault\n \n{\n\n        \ndata\n(){\n\n            \nreturn\n \n{\n\n                \n// new file\n\n                \nnewAvatar\n:\n \n\"\"\n\n            \n}\n\n        \n},\n\n        \nmethods\n:\n \n{\n\n            \n// get file form input\n\n            \ngetFile\n(\ne\n)\n \n{\n\n                \nthis\n.\nnewAvatar\n \n=\n \ne\n.\ntarget\n.\nfiles\n[\n0\n]\n\n            \n},\n\n            \n// upload file\n\n            \nuploadAvatar\n()\n \n{\n\n                \nif\n \n(\n!\nthis\n.\nnewAvatar\n)\n \n{\n\n                    \nreturn\n\n                \n}\n\n                \nlet\n \nname\n \n=\n \nthis\n.\nnewAvatar\n.\nname\n\n                \n// start uploading\n\n                \nthis\n.\n$storage\n.\nupload\n({\n\n                    \nref\n:\n \n`/images/\n${\nname\n}\n`\n,\n\n                    \nfile\n:\n \nthis\n.\nnewAvatar\n,\n\n                    \nprogress\n:\n \n(\nsnapshot\n)\n \n=>\n \n{},\n\n                    \nerror\n:\n \n(\nerr\n)\n \n=>\n \n{\n\n                        \nconsole\n.\nlog\n(\nerr\n.\nmessage\n)\n\n                    \n},\n\n                    \ncompleted\n:\n \n(\ndownloadURL\n)\n \n=>\n \n{\n\n                        \nconsole\n.\nlog\n(\ndownloadURL\n)\n\n                    \n}\n\n                \n})\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n</\nscript\n>\n\n\n\n\n\n\nDelete file\n\u00b6\n\n\nSyntax : \n$storage.delete(string)\n\nReturn : \nPromise\n\n\nYou can delete a file with \ndelete\n method specifying the file path.\n\n\n\n\nThe file's path is a storage path where the concerned file is located.\n\n\n\n\nExample\n\u00b6\n\n\n<\ntemplate\n>\n\n    \n<\ndiv\n \nclass \n=\n \n\"container\"\n>\n\n        \n<\nbutton\n \n@\nclick\n=\n\"delete()\"\n>\nDelete photo\n</\nbutton\n>\n\n    \n</\ndiv\n>\n\n\n</\ntemplate\n>\n\n\n<\nscript\n>\n\n    \nexport\n \ndefault\n \n{\n\n        \ndata\n()\n \n{\n\n            \nreturn\n \n{\n\n                \nfile\n:\n \n\"image/file.png\"\n\n            \n}\n\n        \n},\n\n        \nmethods\n:\n \n{\n\n            \ndelete\n()\n \n{\n\n                \nthis\n.\n$storage\n.\ndelete\n(\nthis\n.\nfile\n)\n\n                \n.\nthen\n(()\n \n=>\n \n{\n\n                    \nconsole\n.\nlog\n(\n\"Deleted\"\n)\n\n                \n}).\ncatch\n((\nerror\n)\n \n=>\n \n{\n\n                    \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                \n})\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n</\nscript\n>",
            "title": "Cloud Storage"
        },
        {
            "location": "/storage/#myfirebase-storage-instance",
            "text": "Syntax :  $storage  $auth  is a global auth instance which called through the Vue component.",
            "title": "Myfirebase Storage instance"
        },
        {
            "location": "/storage/#get-firebase-storage-instance",
            "text": "Syntax :  $storage.get()  You can retrieve firebase storage object using  get()  method.",
            "title": "Get firebase storage instance"
        },
        {
            "location": "/storage/#get-file-url",
            "text": "Syntax :  $storage.getDownloadURL(object)  You can get the file URL of the user avatar or document which stored through firebase storage using  getDownloadURL .",
            "title": "Get File URL"
        },
        {
            "location": "/storage/#example",
            "text": "< template > \n     < div   class  =   \"container\" > \n         < img   :src = \"avatar\"   alt = \"user-avatar\"   /> \n     </ div >  </ template >  < script > \n     export   default   { \n         mounted ()   { \n             // Get file URL from firebase storage \n             this . $storage . getDownloadURL ({ \n                 ref :   \"images/default.png\" , \n                 result :   ( result )   =>   { \n                     this . avatar   =   result \n                 }, \n                 error :   ( error )   =>   { \n                     console . log ( error . message ) \n                 } \n             }) \n         }, \n         data ()   { \n             return   { \n                 avatar :   \"\" \n             } \n         } \n     }  </ script >",
            "title": "Example"
        },
        {
            "location": "/storage/#upload-file",
            "text": "Sytax :  $storage.upload(object)  You can upload a file to firebase cloud storage using  upload(object) .",
            "title": "Upload file"
        },
        {
            "location": "/storage/#example_1",
            "text": "We are going to upload a new file to the server using upload method.  < template > \n     < div   class  =   \"container\" > \n         < label   class = \"btn btn-default\" > \n             < input   type = \"file\"   class = \"hidden\"   @ change = \"getFile\" > \n            Browse\n         </ label > \n         < button   class = \"btn btn-primary\"   @ click = \"uploadAvatar()\" >  update </ i ></ button > \n     </ div >  </ template >  < script > \n     export   default   { \n         data (){ \n             return   { \n                 // new file \n                 newAvatar :   \"\" \n             } \n         }, \n         methods :   { \n             // get file form input \n             getFile ( e )   { \n                 this . newAvatar   =   e . target . files [ 0 ] \n             }, \n             // upload file \n             uploadAvatar ()   { \n                 if   ( ! this . newAvatar )   { \n                     return \n                 } \n                 let   name   =   this . newAvatar . name \n                 // start uploading \n                 this . $storage . upload ({ \n                     ref :   `/images/ ${ name } ` , \n                     file :   this . newAvatar , \n                     progress :   ( snapshot )   =>   {}, \n                     error :   ( err )   =>   { \n                         console . log ( err . message ) \n                     }, \n                     completed :   ( downloadURL )   =>   { \n                         console . log ( downloadURL ) \n                     } \n                 }) \n             } \n         } \n     }  </ script >",
            "title": "Example"
        },
        {
            "location": "/storage/#delete-file",
            "text": "Syntax :  $storage.delete(string) \nReturn :  Promise  You can delete a file with  delete  method specifying the file path.   The file's path is a storage path where the concerned file is located.",
            "title": "Delete file"
        },
        {
            "location": "/storage/#example_2",
            "text": "< template > \n     < div   class  =   \"container\" > \n         < button   @ click = \"delete()\" > Delete photo </ button > \n     </ div >  </ template >  < script > \n     export   default   { \n         data ()   { \n             return   { \n                 file :   \"image/file.png\" \n             } \n         }, \n         methods :   { \n             delete ()   { \n                 this . $storage . delete ( this . file ) \n                 . then (()   =>   { \n                     console . log ( \"Deleted\" ) \n                 }). catch (( error )   =>   { \n                     console . log ( error . message ) \n                 }) \n             } \n         } \n     }  </ script >",
            "title": "Example"
        },
        {
            "location": "/cloud-functions/",
            "text": "Firebase Cloud functions docs\n\n\nPlease check the firebase cloud functions \ndocs\n.\n\n\n\n\nBasically, Myfirebase comes with \n/functions\n directory where you could define and organize your functions and deploy them efficiently.\n\n\nFunctions directory houses index.js, package.json and node modules, so you can organize and structure this directory however you like.\n\n\nGetting started\n\u00b6\n\n\n# move to functions directory.\n\n$ \ncd\n functions\n\n\n# install dependencies.\n\n$ npm install\n\n\n\n\n\nBy default, index.js comes with an example of sending a push notification after the \nonWrite\n event.\n\n\n// index.js\n\n\n\n// require firebase-functions.\n\n\nvar\n \nfunctions\n \n=\n \nrequire\n(\n'firebase-functions'\n);\n\n\n// require firebase-admin.\n\n\nvar\n \nadmin\n \n=\n \nrequire\n(\n'firebase-admin'\n)\n\n\n// initialize firebase app.\n\n\nadmin\n.\ninitializeApp\n(\nfunctions\n.\nconfig\n().\nfirebase\n);\n\n\n// export sendMessageNotification as a function. \n\n\nexports\n.\nsendMessageNotification\n \n=\n \nfunctions\n.\ndatabase\n.\nref\n(\n'data/{messageID}'\n).\nonWrite\n(\nevent\n \n=>\n \n{\n\n    \nif\n \n(\nevent\n.\ndata\n.\nprevious\n.\nexists\n())\n \n{\n\n        \nreturn\n;\n\n    \n}\n\n    \n// get data.\n\n    \nadmin\n.\ndatabase\n().\nref\n(\n'data'\n).\nchild\n(\nevent\n.\nparams\n.\nmessageID\n).\nonce\n(\n'value'\n).\nthen\n(\nfunction\n(\nsnap\n)\n \n{\n\n        \n// retrieve meassage\n\n        \nvar\n \nmessageData\n \n=\n \nsnap\n.\nval\n();\n\n        \n// retrieve token\n\n        \nvar\n \ntopic\n \n=\n \nmessageData\n.\ntoken\n;\n\n        \n// define payload.\n\n        \nvar\n \npayload\n \n=\n \n{\n\n            \nnotification\n:\n \n{\n\n                \ntitle\n:\n \n\"You got a new Message\"\n,\n\n                \nbody\n:\n \nmessageData\n.\ndata\n,\n\n                \nicon\n:\n \n'https://cdn4.iconfinder.com/data/icons/google-i-o-2016/512/google_firebase-2-128.png'\n\n            \n}\n\n        \n};\n\n        \n// send push notification.\n\n        \nadmin\n.\nmessaging\n().\nsendToDevice\n(\ntopic\n,\n \npayload\n)\n\n            \n.\nthen\n(\nfunction\n(\nresponse\n)\n \n{\n\n                \nconsole\n.\nlog\n(\n\"Successfully sent message:\"\n,\n \nresponse\n);\n\n            \n})\n\n            \n.\ncatch\n(\nfunction\n(\nerror\n)\n \n{\n\n                \nconsole\n.\nlog\n(\n\"Error sending message:\"\n,\n \nerror\n);\n\n            \n});\n\n    \n});\n\n\n});\n\n\n\n\n\n\nAs you can see it's easy to write functions with firebase cloud functions.\n\n\n\n\nFirebase cloud messaging\n\n\nThis example of sending push notification requires registering a service-worker through the client site (browser) which is already defined in this project, check the following link \nCloud Messaging\n.",
            "title": "Cloud Functions"
        },
        {
            "location": "/cloud-functions/#getting-started",
            "text": "# move to functions directory. \n$  cd  functions # install dependencies. \n$ npm install  By default, index.js comes with an example of sending a push notification after the  onWrite  event.  // index.js  // require firebase-functions.  var   functions   =   require ( 'firebase-functions' );  // require firebase-admin.  var   admin   =   require ( 'firebase-admin' )  // initialize firebase app.  admin . initializeApp ( functions . config (). firebase );  // export sendMessageNotification as a function.   exports . sendMessageNotification   =   functions . database . ref ( 'data/{messageID}' ). onWrite ( event   =>   { \n     if   ( event . data . previous . exists ())   { \n         return ; \n     } \n     // get data. \n     admin . database (). ref ( 'data' ). child ( event . params . messageID ). once ( 'value' ). then ( function ( snap )   { \n         // retrieve meassage \n         var   messageData   =   snap . val (); \n         // retrieve token \n         var   topic   =   messageData . token ; \n         // define payload. \n         var   payload   =   { \n             notification :   { \n                 title :   \"You got a new Message\" , \n                 body :   messageData . data , \n                 icon :   'https://cdn4.iconfinder.com/data/icons/google-i-o-2016/512/google_firebase-2-128.png' \n             } \n         }; \n         // send push notification. \n         admin . messaging (). sendToDevice ( topic ,   payload ) \n             . then ( function ( response )   { \n                 console . log ( \"Successfully sent message:\" ,   response ); \n             }) \n             . catch ( function ( error )   { \n                 console . log ( \"Error sending message:\" ,   error ); \n             }); \n     });  });   As you can see it's easy to write functions with firebase cloud functions.   Firebase cloud messaging  This example of sending push notification requires registering a service-worker through the client site (browser) which is already defined in this project, check the following link  Cloud Messaging .",
            "title": "Getting started"
        },
        {
            "location": "/cloud-messaging/",
            "text": "Firebase cloud messaging is a powerful tool that provides a simple mechanism to deliver push notifications easily to your Android, IOS or web applications.\n\n\n\n\nFirebase Cloud Messaging\n\n\nPlease check FCM \ndocs\n.\n\n\n\n\nFCM and Myfirebase\n\u00b6\n\n\nAs you may know, FCM javascript API allows you receive notification messages among browsers that provide service worker support.\n\n\nThis includes the following browsers:\n\n\n\n\nChrome: 50+\n\n\nFirefox: 44+\n\n\nOpera Mobile: 37+\n\n\n\n\n\n\nWarning\n\n\nThe FCM SDK is supported only in pages served over HTTPS, due to its use of service workers which are available only on HTTPS sites, Thanks to firebase hosting which provide free hosting for your web application served under HTTPS, Sending messages from the Firebase console is not supported.\n\n\n\n\nTo get started with FCM in your project, you have to add your \nmessagingSenderId\n in \nfirebase-messaging-sw.js\n which is located in public directory.\n\n\n// Give permission to the service worker.\n\n\n// Note that you can only use Firebase Messaging here, other Firebase libraries\n\n\n// are not available in the service worker.\n\n\nimportScripts\n(\n'https://www.gstatic.com/firebasejs/3.9.0/firebase-app.js'\n);\n\n\nimportScripts\n(\n'https://www.gstatic.com/firebasejs/3.9.0/firebase-messaging.js'\n);\n\n\n\n// Initialize the Firebase app into the service worker with the senderID.\n\n\nfirebase\n.\ninitializeApp\n({\n\n    \n'messagingSenderId'\n:\n \n'Your-sender-id'\n\n\n});\n\n\nconst\n \nmessaging\n \n=\n \nfirebase\n.\nmessaging\n();\n\n\n\n// Retreive an instance of Firebase Messaging so we can handle the background\n\n\n// messages.\n\n\nmessaging\n.\nsetBackgroundMessageHandler\n(\nfunction\n(\npayload\n)\n \n{\n\n    \n// Customize notification here\n\n\n});\n\n\n\n\n\n\nThis service worker will handle notification messages in the background.",
            "title": "Cloud Messaging"
        },
        {
            "location": "/cloud-messaging/#fcm-and-myfirebase",
            "text": "As you may know, FCM javascript API allows you receive notification messages among browsers that provide service worker support.  This includes the following browsers:   Chrome: 50+  Firefox: 44+  Opera Mobile: 37+    Warning  The FCM SDK is supported only in pages served over HTTPS, due to its use of service workers which are available only on HTTPS sites, Thanks to firebase hosting which provide free hosting for your web application served under HTTPS, Sending messages from the Firebase console is not supported.   To get started with FCM in your project, you have to add your  messagingSenderId  in  firebase-messaging-sw.js  which is located in public directory.  // Give permission to the service worker.  // Note that you can only use Firebase Messaging here, other Firebase libraries  // are not available in the service worker.  importScripts ( 'https://www.gstatic.com/firebasejs/3.9.0/firebase-app.js' );  importScripts ( 'https://www.gstatic.com/firebasejs/3.9.0/firebase-messaging.js' );  // Initialize the Firebase app into the service worker with the senderID.  firebase . initializeApp ({ \n     'messagingSenderId' :   'Your-sender-id'  });  const   messaging   =   firebase . messaging ();  // Retreive an instance of Firebase Messaging so we can handle the background  // messages.  messaging . setBackgroundMessageHandler ( function ( payload )   { \n     // Customize notification here  });   This service worker will handle notification messages in the background.",
            "title": "FCM and Myfirebase"
        },
        {
            "location": "/global-guard/",
            "text": "As the name implies, the navigation guards provided by vue-router are primarily used to guard navigation either by redirecting it or canceling it. There are a number of ways to hook into the route navigation process: globally, per-route, or in-component.\n\n\n\n\nWarning\n\n\nRemember that params or query changes won't trigger enter/leave navigation guards. You can either watch the $route object to react to those changes or use the beforeRouteUpdate in-component guard, see \nvue-router global navigation guards\n.\n\n\n\n\nMyfirebase global navigation guards.\n\u00b6\n\n\nCreating middleware\n\u00b6\n\n\nMyfirebase provides a simple way to create navigations guards or middlewares, you could simply run \nmyfirebase new:middleware <middleware-name>\n. Myfirebase-cli will generate a middleware template for you located in the \n/src/middlewares/\n directory.\n\n\nTypically, The middleware generated might look something like this:\n\n\n/**\n\n\n * MiddlewareNmae, you can get access\n\n\n * to myfirebase functionalities and vue auth guard via actions.\n\n\n * myfirebase => [auth, storage, store, firestore]\n\n\n * actions => [to, from, next()]\n\n\n * \n\n\n * @param {object} myfirebase \n\n\n * @param {object} actions \n\n\n */\n\n\nconst\n \nMiddlewareName\n \n=\n \n(\nmyfirebase\n,\n \nactions\n)\n \n=>\n \n{\n\n    \n// you can get access to the database via myfirebase.store.\n\n    \n// Example\n\n    \n// var e = myfirebase.store.state.database.ref.child('/foo')\n\n    \n// console.log(e)\n\n    \n// actions.next()\n\n\n}\n\n\n\nexport\n \ndefault\n \nMiddlewareName\n\n\n\n\n\n\nRegistring middlware\n\u00b6\n\n\nIf you want a middleware to run during every route navigation to your application, simply list the middleware function in the \nmiddlewares\n array of your \n/src/middlewares/index.js\n.\n\n\n/**\n\n\n * Here where you can register your middlewares\n\n\n * you could simply do that by adding them to the middlewares array.\n\n\n */\n\n\n\n// import AuthMiddleware.\n\n\nimport\n \nAuthMiddleware\n \nfrom\n \n'./auth'\n\n\n\n// import your new middleware.\n\n\nimport\n \nMiddlewareName\n \nfrom\n \n'./MiddlewareName'\n\n\n\n// register AuthMiddleware and MiddlewareName.\n\n\nconst\n \nmiddlewares\n \n=\n \n[\nAuthMiddleware\n,\n \nMiddlewareName\n]\n\n\n\nexport\n \ndefault\n \nmiddlewares\n\n\n\n\n\n\nAuth Middleware\n\u00b6\n\n\nMyfirebase comes with an example called AuthMiddleware located in middlewares directory, this will check if the user is signed-in or not, and redirect users to the login page.\n\n\nAs you may notice, you will find in the \nroute.js\n file a \nmetadata\n called auth, which is assigned to \nApp\n and \nUpdateProfile\n components.\n\n\n\n\nTip\n\n\nRouting \ndocs\n.\n\n\n\n\n/**\n\n\n * AuthMiddleware, you can get access\n\n\n * to myfirebase functionalities and vue auth guard via actions.\n\n\n * myfirebase => [auth, storage, store, firestore]\n\n\n * actions => [to, from, next()]\n\n\n * \n\n\n * @param {object} myfirebase \n\n\n * @param {object} actions \n\n\n */\n\n\nconst\n \nAuthMiddleware\n \n=\n \n(\nmyfirebase\n,\n \nactions\n)\n \n=>\n \n{\n\n    \nif\n \n(\nactions\n.\nto\n.\nmatched\n.\nsome\n(\nrecord\n \n=>\n \nrecord\n.\nmeta\n.\nauth\n))\n \n{\n\n        \nmyfirebase\n.\nauth\n.\ncheck\n({\n\n            \nthen\n:\n \n()\n \n=>\n \n{\n\n                \nactions\n.\nnext\n()\n\n            \n},\n\n            \ncatch\n:\n \n()\n \n=>\n \n{\n\n                \nactions\n.\nnext\n({\n \npath\n:\n \n'/login'\n \n})\n\n            \n}\n\n        \n})\n\n    \n}\n \nelse\n \n{\n\n        \nactions\n.\nnext\n()\n\n    \n}\n\n\n}\n\n\n\nexport\n \ndefault\n \nAuthMiddleware\n\n\n\n\n\n\nMyfirebase and Per-Route Guard\n\u00b6\n\n\nYou can define beforeEnter guards directly on a route's configuration object, and also retrieve Firebase Auth, database, and storage by importing Vue:\n\n\n// Components.\n\n\nimport\n \nWelcome\n \nfrom\n \n'@/components/Welcome'\n\n\nimport\n \nExample\n \nfrom\n \n'@/components/Example'\n\n\n\n//Vue.\n\n\nimport\n \nVue\n \nfrom\n \n'vue'\n\n\n\nconst\n \nroutes\n \n=\n \n[{\n\n        \npath\n:\n \n'/'\n,\n\n        \ncomponent\n:\n \nLanding\n,\n\n        \nchildren\n:\n \n[{\n\n                \npath\n:\n \n'/'\n,\n\n                \ncomponent\n:\n \nWelcome\n,\n\n                \nname\n:\n \n'Welcome'\n\n            \n},\n\n            \n{\n\n                \npath\n:\n \n'/example'\n\n                \ncomponent\n:\n \nExample\n,\n\n                \nname\n:\n \n'example'\n,\n\n                \n// Pre-Route Guard.\n\n                \nbeforeEnter\n:\n \n(\nto\n,\n \nfrom\n,\n \nnext\n)\n \n=>\n \n{\n\n                    \n// retrieve firebase Auth\n\n                    \nvar\n \nauth\n \n=\n \nVue\n.\nauth\n;\n\n                    \nif\n \n(\nauth\n.\nuser\n().\nemail\n \n===\n \n\"example@mail.com\"\n){\n\n                        \nnext\n()\n\n                    \n}\n \nelse\n \n{\n\n                        \nnext\n({\npath\n:\n \n'/login'\n})\n\n                    \n}\n\n                \n}\n \n            \n}\n\n        \n]\n\n    \n},\n\n    \n{\n\n        \npath\n:\n \n'*'\n,\n\n        \ncomponents\n:\n \nNotFound\n\n    \n}\n\n\n]",
            "title": "Middlewares (Global Navigation guards)"
        },
        {
            "location": "/global-guard/#myfirebase-global-navigation-guards",
            "text": "",
            "title": "Myfirebase global navigation guards."
        },
        {
            "location": "/global-guard/#creating-middleware",
            "text": "Myfirebase provides a simple way to create navigations guards or middlewares, you could simply run  myfirebase new:middleware <middleware-name> . Myfirebase-cli will generate a middleware template for you located in the  /src/middlewares/  directory.  Typically, The middleware generated might look something like this:  /**   * MiddlewareNmae, you can get access   * to myfirebase functionalities and vue auth guard via actions.   * myfirebase => [auth, storage, store, firestore]   * actions => [to, from, next()]   *    * @param {object} myfirebase    * @param {object} actions    */  const   MiddlewareName   =   ( myfirebase ,   actions )   =>   { \n     // you can get access to the database via myfirebase.store. \n     // Example \n     // var e = myfirebase.store.state.database.ref.child('/foo') \n     // console.log(e) \n     // actions.next()  }  export   default   MiddlewareName",
            "title": "Creating middleware"
        },
        {
            "location": "/global-guard/#registring-middlware",
            "text": "If you want a middleware to run during every route navigation to your application, simply list the middleware function in the  middlewares  array of your  /src/middlewares/index.js .  /**   * Here where you can register your middlewares   * you could simply do that by adding them to the middlewares array.   */  // import AuthMiddleware.  import   AuthMiddleware   from   './auth'  // import your new middleware.  import   MiddlewareName   from   './MiddlewareName'  // register AuthMiddleware and MiddlewareName.  const   middlewares   =   [ AuthMiddleware ,   MiddlewareName ]  export   default   middlewares",
            "title": "Registring middlware"
        },
        {
            "location": "/global-guard/#auth-middleware",
            "text": "Myfirebase comes with an example called AuthMiddleware located in middlewares directory, this will check if the user is signed-in or not, and redirect users to the login page.  As you may notice, you will find in the  route.js  file a  metadata  called auth, which is assigned to  App  and  UpdateProfile  components.   Tip  Routing  docs .   /**   * AuthMiddleware, you can get access   * to myfirebase functionalities and vue auth guard via actions.   * myfirebase => [auth, storage, store, firestore]   * actions => [to, from, next()]   *    * @param {object} myfirebase    * @param {object} actions    */  const   AuthMiddleware   =   ( myfirebase ,   actions )   =>   { \n     if   ( actions . to . matched . some ( record   =>   record . meta . auth ))   { \n         myfirebase . auth . check ({ \n             then :   ()   =>   { \n                 actions . next () \n             }, \n             catch :   ()   =>   { \n                 actions . next ({   path :   '/login'   }) \n             } \n         }) \n     }   else   { \n         actions . next () \n     }  }  export   default   AuthMiddleware",
            "title": "Auth Middleware"
        },
        {
            "location": "/global-guard/#myfirebase-and-per-route-guard",
            "text": "You can define beforeEnter guards directly on a route's configuration object, and also retrieve Firebase Auth, database, and storage by importing Vue:  // Components.  import   Welcome   from   '@/components/Welcome'  import   Example   from   '@/components/Example'  //Vue.  import   Vue   from   'vue'  const   routes   =   [{ \n         path :   '/' , \n         component :   Landing , \n         children :   [{ \n                 path :   '/' , \n                 component :   Welcome , \n                 name :   'Welcome' \n             }, \n             { \n                 path :   '/example' \n                 component :   Example , \n                 name :   'example' , \n                 // Pre-Route Guard. \n                 beforeEnter :   ( to ,   from ,   next )   =>   { \n                     // retrieve firebase Auth \n                     var   auth   =   Vue . auth ; \n                     if   ( auth . user (). email   ===   \"example@mail.com\" ){ \n                         next () \n                     }   else   { \n                         next ({ path :   '/login' }) \n                     } \n                 }  \n             } \n         ] \n     }, \n     { \n         path :   '*' , \n         components :   NotFound \n     }  ]",
            "title": "Myfirebase and Per-Route Guard"
        },
        {
            "location": "/admin/",
            "text": "",
            "title": "Firebase Admin (Feature request)"
        }
    ]
}