{
    "docs": [
        {
            "location": "/", 
            "text": "Myfirebase\n \nSPA Framework\n Documentation\n\n\n\nMyfirebase\n is a decoupled single page application framework which is highly compatible with google firebase.\n\n\n\n\n\n\nEasy to use\n : Simple, nice directory structure.\n\n\n\n\n\n\nSeparation of concerns\n : Using \nVuejs\n components and \nVuex\n a state management system.\n\n\n\n\n\n\nFirebase\n : Authentication, Reeltime Database, Cloud storage, all in one.", 
            "title": "Welcome"
        }, 
        {
            "location": "/installation/", 
            "text": "Prerequisites\n\n\n\n\nNPM\n is the recommended installation method when building large scale applications with \nMyfirebase\n.\n\n\n\n\nIf this is the first time you want to give \nnpm\n a shot, don't worry, we got exactly what you need.\n\n\n\n\n\n\nHow to Install Node.js and NPM on Windows\n\n\n\n\n\n\nHow to Install Node.js and NPM on a Mac\n\n\n\n\n\n\nHow to Install Node.js and NPM on a Linux\n\n\n\n\n\n\nFirebase command line interface\n, \nnpm install -g firebase-tools\n\n\n\n\n\n\nInstalling Myfirebase\n\n\n# Clone the repository\n\ngit clone https://github.com/myfirebase/myfirebase\n\n\n# Change directory\n\n\ncd\n myfirebase\n\n\n# Install dependencies\n\nnpm install\n\n\n# Sign in using your Google account\n\nfirebase login\n\n\n# Initialize firebase project\n\nfirebase init\n\n\n\n\n\nRun dev server\n\n\n# Run the server\n\nnpm run dev\n\n\n\n\n\nProduction\n\n\n# Production\n\nnpm run build\n\n\n\n\n\nDeploy your project\n\n\n# Deploy project\n\nfirebase deploy\n\n\n\n\n\nCongratulations\n\n\n\n\nCongratulations\n\n\nYou've installed \nMyfirebase\n correctly, now let's dive right in to this framework directory to see what's going on, \nDirectory Structure\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#prerequisites", 
            "text": "NPM  is the recommended installation method when building large scale applications with  Myfirebase .   If this is the first time you want to give  npm  a shot, don't worry, we got exactly what you need.    How to Install Node.js and NPM on Windows    How to Install Node.js and NPM on a Mac    How to Install Node.js and NPM on a Linux    Firebase command line interface ,  npm install -g firebase-tools", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/#installing-myfirebase", 
            "text": "# Clone the repository \ngit clone https://github.com/myfirebase/myfirebase # Change directory  cd  myfirebase # Install dependencies \nnpm install # Sign in using your Google account \nfirebase login # Initialize firebase project \nfirebase init", 
            "title": "Installing Myfirebase"
        }, 
        {
            "location": "/installation/#run-dev-server", 
            "text": "# Run the server \nnpm run dev", 
            "title": "Run dev server"
        }, 
        {
            "location": "/installation/#production", 
            "text": "# Production \nnpm run build", 
            "title": "Production"
        }, 
        {
            "location": "/installation/#deploy-your-project", 
            "text": "# Deploy project \nfirebase deploy", 
            "title": "Deploy your project"
        }, 
        {
            "location": "/installation/#congratulations", 
            "text": "Congratulations  You've installed  Myfirebase  correctly, now let's dive right in to this framework directory to see what's going on,  Directory Structure .", 
            "title": "Congratulations"
        }, 
        {
            "location": "/directory-structure/", 
            "text": "Checking out the project structure\n\n\nBy default, Myfireabse Application structure provides a great starting point for your application, For sure, you are free to organize your files/directories however you like.\n\n\nRoot Directory\n\n\nThe root directory contains \nsrc\n, \nbuild\n, \nconfig\n, \nfunctions\n and \npublic\n directories. \n\n\nThis directory also houses your firebase.json and database.rules.json file.\n\n\n/src\n\n\nYour main code lives here, Where the application core is located, \nfirebase\n, routes, main.js and Vue components, 99% of the time, you'll be working in \nsrc/\n.\n\n\n\n\n\n\n/src/assets\n directory, where you can write your global sass/scss preprocessor.\n\n\n\n\n\n\n/src/firebase\n directory, contains firebase SDK class and config.js file, \n\n\n\n\n\n\n/src/routes\n directory, where you can define your application routes, \nVuejs Routes Docs\n. \n\n\n\n\n\n\nmain.js file where your application core is defined. \n\n\n\n\n\n\n/src/component\n directory as the name implies, contains alll of your application components files, here wjere you can create new Vue components, according to vuejs, components took \n.vue\n as extemsion, see \nVuejs Components\n.\n\n\n\n\n\n\nFor sure, you are free to define and organize this directory structure however you like.\n\n\n/storage\n\n\nThe Storage Directory contains all of your storage files.\n\n\nWhat is storage??\n\n\nStorage is a state management pattern + library for Vue.js applications, Vuex keeps components communicating to each other, see \nVuex\n.\n\n\n/public\n\n\nPublic directory contains the main index.html file, this directory also houses all of your application compiled assets files css/js, \nthese assets will be injected to index.html automatically\n\n\n\n\n\n\nindex.html \nindex page\n\n\n\n\n\n\n404.html \nNotFound page 404\n\n\n\n\n\n\ncss \ncss directory\n\n\n\n\n\n\njs \njs directory\n\n\n\n\n\n\n/build\n\n\nApparently you may not touch anything right here, this directory contains all the \nbuild\n files managed by node.js\n\n\n/config\n\n\nWhere development and production mode configuration is located.", 
            "title": "Directory Structure"
        }, 
        {
            "location": "/directory-structure/#checking-out-the-project-structure", 
            "text": "By default, Myfireabse Application structure provides a great starting point for your application, For sure, you are free to organize your files/directories however you like.", 
            "title": "Checking out the project structure"
        }, 
        {
            "location": "/directory-structure/#root-directory", 
            "text": "The root directory contains  src ,  build ,  config ,  functions  and  public  directories.   This directory also houses your firebase.json and database.rules.json file.", 
            "title": "Root Directory"
        }, 
        {
            "location": "/directory-structure/#src", 
            "text": "Your main code lives here, Where the application core is located,  firebase , routes, main.js and Vue components, 99% of the time, you'll be working in  src/ .    /src/assets  directory, where you can write your global sass/scss preprocessor.    /src/firebase  directory, contains firebase SDK class and config.js file,     /src/routes  directory, where you can define your application routes,  Vuejs Routes Docs .     main.js file where your application core is defined.     /src/component  directory as the name implies, contains alll of your application components files, here wjere you can create new Vue components, according to vuejs, components took  .vue  as extemsion, see  Vuejs Components .    For sure, you are free to define and organize this directory structure however you like.", 
            "title": "/src"
        }, 
        {
            "location": "/directory-structure/#storage", 
            "text": "The Storage Directory contains all of your storage files.  What is storage??  Storage is a state management pattern + library for Vue.js applications, Vuex keeps components communicating to each other, see  Vuex .", 
            "title": "/storage"
        }, 
        {
            "location": "/directory-structure/#public", 
            "text": "Public directory contains the main index.html file, this directory also houses all of your application compiled assets files css/js,  these assets will be injected to index.html automatically    index.html  index page    404.html  NotFound page 404    css  css directory    js  js directory", 
            "title": "/public"
        }, 
        {
            "location": "/directory-structure/#build", 
            "text": "Apparently you may not touch anything right here, this directory contains all the  build  files managed by node.js", 
            "title": "/build"
        }, 
        {
            "location": "/directory-structure/#config", 
            "text": "Where development and production mode configuration is located.", 
            "title": "/config"
        }, 
        {
            "location": "/authentication/", 
            "text": "Tip\n\n\nBefore you begin, please check the \nfirebase auth docs\n.\n\n\n\n\nHow hard it is to integrate \nFirebase auth\n to your web project especially when you try to structure and orginize firebase auth globally to be used through all \nVue components\n.\n\n\nThanks to \nMyfirebase auth system\n which makes firebase auth easier to be managed using \nVuex\n, the fireabse auth is injected and triggered at beginning of the Vue instance.\n\n\n\n\n\nAuth instance\n\n\nSyntax : \n$auth\n\n\n$auth\n is a global auth instance which called through Vue component.\n\n\nExample\n\n\ntemplate\n\n    \ndiv\n \nclass \n=\n \ncontainer\n\n        \n!-- display result --\n\n        User Name : {{userName}}\n        Email :     {{userEmail}}\n    \n/\ndiv\n\n\ntemplate\n\n\n\nscript\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n()\n \n{\n\n            \n// retrieve username.\n\n            \nthis\n.\nuserName\n \n=\n \nthis\n.\n$auth\n.\nuser\n().\ndisplayName\n\n            \n// retrieve user email.\n\n            \nthis\n.\nuserEmail\n \n=\n \nthis\n.\n$auth\n.\nuser\n().\nemail\n\n        \n},\n\n        \ndata\n()\n \n{\n\n            \nreturn\n \n{\n\n                \nuserName\n:\n \n\n            \n}\n\n        \n}\n\n    \n}\n\n\n/\nscript\n\n\n\n\n\n\nBasically \n$auth\n instance is your key to get access and manage \nfirebase auth\n.\n\n\n\n\n\nGet Firebase Auth Module\n\n\nTo retrieve firebase auth module.\n\n\nSyntax : \n$auth.getAuth()\n\n\n\n\n\nGet current user\n\n\nYou can get the current signed in user by calling global auth instance.\n\n\nSyntax : \n$auth.getUser()\n\n\nExample\n\n\nscript\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n()\n \n{\n\n            \n// get current user\n\n            \nlet\n \nuser\n \n=\n \nthis\n.\n$auth\n.\ngetUser\n()\n\n            \n// get email\n\n            \nconsole\n.\nlog\n(\nuser\n.\nemail\n)\n\n            \n// get username\n\n            \nconsole\n.\nlog\n(\nuser\n.\ndisplayName\n)\n\n        \n}\n\n    \n}\n\n\n/\nscript\n\n\n\n\n\n\n\n\n\nUpdate Profile Picture\n\n\nYou can update profile pricture usign \nupdateProfilePicture(object)\n method, this will update the default firebase user \nprofileURL\n.\n\n\n\n\nTip\n\n\nBefore you start updating profile picture, make sure that you have uploaded that picture to firebase storage, and get photoURL, see \nUpload a file with Myfirebase\n.\n\n\n\n\nSyntax : \n$auth.updateProfilePicture(object)\n\n\nExample\n\n\nscript\n\n    export default {\n        mounted () {\n\n        },\n        data () {\n            return {\n                // link to profile photo\n                picture: \nhttps://link-to-photo.test/profile.png\n\n            }\n        },\n        methods:{\n            // update profile picture\n            updateProfilePicture() {\n                this.$auth.updateProfilePicture({\n                    // picture link\n                    ref: this.picture,\n                    result: () =\n {\n                        //updated\n                    },\n                    error: (error) =\n {\n                        console.log(error.message)\n                    }\n                })\n            }\n        }\n    }\n\nscript\n\n\n\n\n\n\n\n\n\nAuth state\n\n\nSyntax : \n$auth.state(object)\n\n\nConsider it just like a auth middleware where you can check if the user is signed in or not, you can also redirect user to an other component if he doesn't signed in.\n\n\nExample\n\n\ntemplate\n\n    \ndiv\n \nclass \n=\n \ncontainer\n\n        \n!-- display result --\n\n        User Name : {{userName}}\n    \n/\ndiv\n\n\ntemplate\n\n\n\nscript\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n()\n \n{\n\n            \n// Check if the user signed in with redirection. \n\n            \nthis\n.\n$auth\n.\nstate\n({\n\n                \nforward\n:\n \n,\n\n                \nredirect\n:\n \n/login\n,\n\n                \nthen\n:\n \n(\nuser\n)\n \n=\n \n{\n\n                    \nthis\n.\nuserName\n \n=\n \nuser\n.\ndisplayName\n \n                \n},\n\n                \ncatch\n:\n \n(\nerror\n)\n \n=\n \n{\n\n                    \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                \n}\n\n            \n})\n\n        \n},\n\n        \ndata\n()\n \n{\n\n            \nreturn\n \n{\n\n                \nuserName\n:\n \n\n            \n}\n\n        \n}\n\n    \n}\n\n\n/\nscript\n\n\n\n\n\n\n\n\n\nAuth check\n\n\nJust like \nauth state\n but without redirection.\n\n\nSyntax : \n$auth.check(object)\n\n\nExample\n\n\ntemplate\n\n    \nul\n \nclass\n=\nnav navbar-nav navbar-right\n\n        \nli\n \nv-if \n=\n \nsigned\n \nclass\n=\n\n            \na\n \nhref\n=\n#\n{{userName}}\n/\na\n\n            \nul\n \nclass\n=\ndropdown-menu\n\n                \nli\nLogout\n/\na\n/\nli\n\n            \n/\nul\n\n        \n/\nli\n\n    \n/\nul\n\n\ntemplate\n\n\n\nscript\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n()\n \n{\n\n            \n// Check if the user signed in without redirection. \n\n            \nthis\n.\n$auth\n.\ncheck\n({\n\n                \nthen\n:\n \n(\nuser\n)\n \n=\n \n{\n\n                    \nthis\n.\nsigned\n \n=\n \ntrue\n\n                    \nthis\n.\nuserName\n \n=\n \nuser\n.\ndisplayName\n \n                \n},\n\n                \ncatch\n:\n \n(\nerror\n)\n \n=\n \n{\n\n                    \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                \n}\n\n            \n})\n\n        \n},\n\n        \ndata\n()\n \n{\n\n            \nreturn\n \n{\n\n                \nuserName\n:\n \n,\n\n                \nsigned\n:\n \nfalse\n,\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n/\nscript\n\n\n\n\n\n\n\n\n\nSignup with email and password\n\n\nTo register a new user with email and password.\n\n\nSynax : \n$auth.registerWithEmailAndPassword(object)\n\n\nExample\n\n\ntemplate\n\n    \ndiv\n \nclass \n=\n \nregister\n\n        \ninput\n \ntype\n=\ntext\n \nv-mode\n=\nemail\n\n        \ninput\n \ntype\n=\npassword\n \nv-model\n=\npassword\n\n        \nbutton\n \n@\nclick\n=\nregister\n/\nbutton\n\n    \n/\ndiv\n\n\ntemplate\n\n\n\nscript\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n()\n \n{\n\n            \n// Check if the user signed in with redirection. \n\n            \nthis\n.\n$auth\n.\nstate\n({\n\n                \nforward\n:\n \n/app\n,\n\n                \nredirect\n:\n \n/login\n,\n\n                \nthen\n:\n \n(\nuser\n)\n \n=\n \n{\n\n                    \n//\n\n                \n},\n\n                \ncatch\n:\n \n(\nerror\n)\n \n=\n \n{\n\n                    \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                \n}\n\n            \n})\n\n        \n},\n\n        \ndata\n()\n \n{\n\n            \nreturn\n \n{\n\n                \nemail\n:\n \n,\n\n                \npassword\n:\n \n,\n\n            \n}\n\n        \n},\n\n        \nmethods\n:\n \n{\n\n            \nregisterWithEmailAndPassword\n(){\n\n                \n// register user with email and password\n\n                \nthis\n.\n$auth\n.\nregisterWithEmailAndPassword\n({\n\n                    \nemail\n:\n \nthis\n.\nemail\n,\n\n                    \npassword\n:\n \nthis\n.\npassword\n,\n\n                    \nresult\n:\n \n(\nuser\n)\n \n=\n \n{\n\n                        \nconsole\n.\nlog\n(\nUser Email : \n \n+\n \nuser\n.\nemail\n)\n\n                    \n},\n\n                    \nerror\n:\n \n(\nerror\n)\n \n=\n \n{\n\n                        \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                    \n}\n\n                \n});\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n/\nscript\n\n\n\n\n\n\n\n\n\nSignIn with email and password\n\n\nTo signin a user with email and passowrd.\n\n\nSyntax : \n$auth.loginWithEmailAndPassword(object)\n\n\nExample\n\n\ntemplate\n\n    \ndiv\n \nclass \n=\n \nregister\n\n        \ninput\n \ntype\n=\ntext\n \nv-mode\n=\nemail\n\n        \ninput\n \ntype\n=\npassword\n \nv-model\n=\npassword\n\n        \nbutton\n \n@\nclick\n=\nloginWithEmailAndPassword\n/\nbutton\n\n    \n/\ndiv\n\n\ntemplate\n\n\n\nscript\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n()\n \n{\n\n            \n// Check if the user signed in with redirection. \n\n            \nthis\n.\n$auth\n.\nstate\n({\n\n                \nforward\n:\n \n/app\n,\n\n                \nredirect\n:\n \n/login\n,\n\n                \nthen\n:\n \n(\nuser\n)\n \n=\n \n{\n\n                    \n//\n\n                \n},\n\n                \ncatch\n:\n \n(\nerror\n)\n \n=\n \n{\n\n                    \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                \n}\n\n            \n})\n\n        \n},\n\n        \ndata\n()\n \n{\n\n            \nreturn\n \n{\n\n                \nemail\n:\n \n,\n\n                \npassword\n:\n \n,\n\n            \n}\n\n        \n},\n\n        \nmethods\n:\n \n{\n\n            \nloginWithEmailAndPassword\n()\n \n{\n\n                \n// login with email and password\n\n                \nthis\n.\n$auth\n.\nloginWithEmailAndPassword\n({\n\n                    \nemail\n:\n \nthis\n.\nemail\n,\n\n                    \npassword\n:\n \nthis\n.\npassword\n,\n\n                    \nresult\n:\n \n(\nuser\n)\n \n=\n \n{\n\n                        \nconsole\n.\nlog\n(\nUser Email : \n \n+\n \nuser\n.\nemail\n)\n\n                    \n},\n\n                    \nerror\n:\n \n(\nerror\n)\n \n=\n \n{\n\n                        \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                    \n}\n\n                \n});\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n/\nscript\n\n\n\n\n\n\n\n\n\nSignIn with google\n\n\nlet your users authenticate with Firebase using their \nGoogle accounts\n.\n\n\nSyntax : \n$auth.signInWithGoogle(object)\n\n\nExample\n\n\ntemplate\n\n    \ndiv\n \nclass \n=\n \nregister\n\n        \nh3\nSignIn using google account\n/\nh3\n\n        \nbutton\n \n@\nclick\n=\nsignInWithGoogle\nUsing google\n/\nbutton\n\n    \n/\ndiv\n\n\ntemplate\n\n\n\nscript\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n()\n \n{\n\n            \n// Check if the user signed in with redirection. \n\n            \nthis\n.\n$auth\n.\nstate\n({\n\n                \nforward\n:\n \n/app\n,\n\n                \nredirect\n:\n \n/login\n,\n\n                \nthen\n:\n \n(\nuser\n)\n \n=\n \n{\n\n                    \n//\n\n                \n},\n\n                \ncatch\n:\n \n(\nerror\n)\n \n=\n \n{\n\n                    \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                \n}\n\n            \n})\n\n        \n},\n\n        \ndata\n()\n \n{\n\n            \nreturn\n \n{\n\n            \n}\n\n        \n},\n\n        \nmethods\n:\n \n{\n\n            \nsignInWithGoogle\n()\n \n{\n\n                \n// SignIn with google\n\n                \nthis\n.\n$auth\n.\nsignInWithGoogle\n({\n\n                    \nresult\n:\n \n(\nuser\n)\n \n=\n \n{\n\n                        \n// This gives you a Google Access Token. You can use it to access the Google API.\n\n                        \n// The signed-in user info.\n\n                    \n},\n\n                    \nerror\n:\n \n(\nerror\n)\n \n=\n \n{\n\n                        \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                    \n}\n\n                \n});\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n/\nscript\n\n\n\n\n\n\n\n\n\nSignIn with Facebook\n\n\nTo let your users authenticate with Firebase using their \nFacebook Accounts\n.\n\n\nSyntax : \n$auth.signInWithFacebook(object)\n\n\n\n\n\nSignIn with Twitter\n\n\nTo let your users authenticate with Firebase using their \nTwitter Accounts\n.\n\n\nSyntax : \n$auth.signInWithTwitter(object)\n\n\n\n\n\nSignIn with Github\n\n\nTo let your users authenticate with Firebase using their \nGithub Accounts\n.\n\n\nSyntax : \n$auth.signInWithGithub(object)\n\n\n\n\n\nSignOut\n\n\nTo sign out a user, call \nlogout\n.\n\n\nSyntax : \n$auth.logout()", 
            "title": "Authentication"
        }, 
        {
            "location": "/authentication/#auth-instance", 
            "text": "Syntax :  $auth  $auth  is a global auth instance which called through Vue component.", 
            "title": "Auth instance"
        }, 
        {
            "location": "/authentication/#example", 
            "text": "template \n     div   class  =   container \n         !-- display result -- \n        User Name : {{userName}}\n        Email :     {{userEmail}}\n     / div  template  script \n     export   default   { \n         mounted ()   { \n             // retrieve username. \n             this . userName   =   this . $auth . user (). displayName \n             // retrieve user email. \n             this . userEmail   =   this . $auth . user (). email \n         }, \n         data ()   { \n             return   { \n                 userName :   \n             } \n         } \n     }  / script   Basically  $auth  instance is your key to get access and manage  firebase auth .", 
            "title": "Example"
        }, 
        {
            "location": "/authentication/#get-firebase-auth-module", 
            "text": "To retrieve firebase auth module.  Syntax :  $auth.getAuth()", 
            "title": "Get Firebase Auth Module"
        }, 
        {
            "location": "/authentication/#get-current-user", 
            "text": "You can get the current signed in user by calling global auth instance.  Syntax :  $auth.getUser()", 
            "title": "Get current user"
        }, 
        {
            "location": "/authentication/#example_1", 
            "text": "script \n     export   default   { \n         mounted ()   { \n             // get current user \n             let   user   =   this . $auth . getUser () \n             // get email \n             console . log ( user . email ) \n             // get username \n             console . log ( user . displayName ) \n         } \n     }  / script", 
            "title": "Example"
        }, 
        {
            "location": "/authentication/#update-profile-picture", 
            "text": "You can update profile pricture usign  updateProfilePicture(object)  method, this will update the default firebase user  profileURL .   Tip  Before you start updating profile picture, make sure that you have uploaded that picture to firebase storage, and get photoURL, see  Upload a file with Myfirebase .   Syntax :  $auth.updateProfilePicture(object)", 
            "title": "Update Profile Picture"
        }, 
        {
            "location": "/authentication/#example_2", 
            "text": "script \n    export default {\n        mounted () {\n\n        },\n        data () {\n            return {\n                // link to profile photo\n                picture:  https://link-to-photo.test/profile.png \n            }\n        },\n        methods:{\n            // update profile picture\n            updateProfilePicture() {\n                this.$auth.updateProfilePicture({\n                    // picture link\n                    ref: this.picture,\n                    result: () =  {\n                        //updated\n                    },\n                    error: (error) =  {\n                        console.log(error.message)\n                    }\n                })\n            }\n        }\n    } script", 
            "title": "Example"
        }, 
        {
            "location": "/authentication/#auth-state", 
            "text": "Syntax :  $auth.state(object)  Consider it just like a auth middleware where you can check if the user is signed in or not, you can also redirect user to an other component if he doesn't signed in.", 
            "title": "Auth state"
        }, 
        {
            "location": "/authentication/#example_3", 
            "text": "template \n     div   class  =   container \n         !-- display result -- \n        User Name : {{userName}}\n     / div  template  script \n     export   default   { \n         mounted ()   { \n             // Check if the user signed in with redirection.  \n             this . $auth . state ({ \n                 forward :   , \n                 redirect :   /login , \n                 then :   ( user )   =   { \n                     this . userName   =   user . displayName  \n                 }, \n                 catch :   ( error )   =   { \n                     console . log ( error . message ) \n                 } \n             }) \n         }, \n         data ()   { \n             return   { \n                 userName :   \n             } \n         } \n     }  / script", 
            "title": "Example"
        }, 
        {
            "location": "/authentication/#auth-check", 
            "text": "Just like  auth state  but without redirection.  Syntax :  $auth.check(object)", 
            "title": "Auth check"
        }, 
        {
            "location": "/authentication/#example_4", 
            "text": "template \n     ul   class = nav navbar-nav navbar-right \n         li   v-if  =   signed   class = \n             a   href = # {{userName}} / a \n             ul   class = dropdown-menu \n                 li Logout / a / li \n             / ul \n         / li \n     / ul  template  script \n     export   default   { \n         mounted ()   { \n             // Check if the user signed in without redirection.  \n             this . $auth . check ({ \n                 then :   ( user )   =   { \n                     this . signed   =   true \n                     this . userName   =   user . displayName  \n                 }, \n                 catch :   ( error )   =   { \n                     console . log ( error . message ) \n                 } \n             }) \n         }, \n         data ()   { \n             return   { \n                 userName :   , \n                 signed :   false , \n             } \n         } \n     }  / script", 
            "title": "Example"
        }, 
        {
            "location": "/authentication/#signup-with-email-and-password", 
            "text": "To register a new user with email and password.  Synax :  $auth.registerWithEmailAndPassword(object)", 
            "title": "Signup with email and password"
        }, 
        {
            "location": "/authentication/#example_5", 
            "text": "template \n     div   class  =   register \n         input   type = text   v-mode = email \n         input   type = password   v-model = password \n         button   @ click = register / button \n     / div  template  script \n     export   default   { \n         mounted ()   { \n             // Check if the user signed in with redirection.  \n             this . $auth . state ({ \n                 forward :   /app , \n                 redirect :   /login , \n                 then :   ( user )   =   { \n                     // \n                 }, \n                 catch :   ( error )   =   { \n                     console . log ( error . message ) \n                 } \n             }) \n         }, \n         data ()   { \n             return   { \n                 email :   , \n                 password :   , \n             } \n         }, \n         methods :   { \n             registerWithEmailAndPassword (){ \n                 // register user with email and password \n                 this . $auth . registerWithEmailAndPassword ({ \n                     email :   this . email , \n                     password :   this . password , \n                     result :   ( user )   =   { \n                         console . log ( User Email :    +   user . email ) \n                     }, \n                     error :   ( error )   =   { \n                         console . log ( error . message ) \n                     } \n                 }); \n             } \n         } \n     }  / script", 
            "title": "Example"
        }, 
        {
            "location": "/authentication/#signin-with-email-and-password", 
            "text": "To signin a user with email and passowrd.  Syntax :  $auth.loginWithEmailAndPassword(object)", 
            "title": "SignIn with email and password"
        }, 
        {
            "location": "/authentication/#example_6", 
            "text": "template \n     div   class  =   register \n         input   type = text   v-mode = email \n         input   type = password   v-model = password \n         button   @ click = loginWithEmailAndPassword / button \n     / div  template  script \n     export   default   { \n         mounted ()   { \n             // Check if the user signed in with redirection.  \n             this . $auth . state ({ \n                 forward :   /app , \n                 redirect :   /login , \n                 then :   ( user )   =   { \n                     // \n                 }, \n                 catch :   ( error )   =   { \n                     console . log ( error . message ) \n                 } \n             }) \n         }, \n         data ()   { \n             return   { \n                 email :   , \n                 password :   , \n             } \n         }, \n         methods :   { \n             loginWithEmailAndPassword ()   { \n                 // login with email and password \n                 this . $auth . loginWithEmailAndPassword ({ \n                     email :   this . email , \n                     password :   this . password , \n                     result :   ( user )   =   { \n                         console . log ( User Email :    +   user . email ) \n                     }, \n                     error :   ( error )   =   { \n                         console . log ( error . message ) \n                     } \n                 }); \n             } \n         } \n     }  / script", 
            "title": "Example"
        }, 
        {
            "location": "/authentication/#signin-with-google", 
            "text": "let your users authenticate with Firebase using their  Google accounts .  Syntax :  $auth.signInWithGoogle(object)", 
            "title": "SignIn with google"
        }, 
        {
            "location": "/authentication/#example_7", 
            "text": "template \n     div   class  =   register \n         h3 SignIn using google account / h3 \n         button   @ click = signInWithGoogle Using google / button \n     / div  template  script \n     export   default   { \n         mounted ()   { \n             // Check if the user signed in with redirection.  \n             this . $auth . state ({ \n                 forward :   /app , \n                 redirect :   /login , \n                 then :   ( user )   =   { \n                     // \n                 }, \n                 catch :   ( error )   =   { \n                     console . log ( error . message ) \n                 } \n             }) \n         }, \n         data ()   { \n             return   { \n             } \n         }, \n         methods :   { \n             signInWithGoogle ()   { \n                 // SignIn with google \n                 this . $auth . signInWithGoogle ({ \n                     result :   ( user )   =   { \n                         // This gives you a Google Access Token. You can use it to access the Google API. \n                         // The signed-in user info. \n                     }, \n                     error :   ( error )   =   { \n                         console . log ( error . message ) \n                     } \n                 }); \n             } \n         } \n     }  / script", 
            "title": "Example"
        }, 
        {
            "location": "/authentication/#signin-with-facebook", 
            "text": "To let your users authenticate with Firebase using their  Facebook Accounts .  Syntax :  $auth.signInWithFacebook(object)", 
            "title": "SignIn with Facebook"
        }, 
        {
            "location": "/authentication/#signin-with-twitter", 
            "text": "To let your users authenticate with Firebase using their  Twitter Accounts .  Syntax :  $auth.signInWithTwitter(object)", 
            "title": "SignIn with Twitter"
        }, 
        {
            "location": "/authentication/#signin-with-github", 
            "text": "To let your users authenticate with Firebase using their  Github Accounts .  Syntax :  $auth.signInWithGithub(object)", 
            "title": "SignIn with Github"
        }, 
        {
            "location": "/authentication/#signout", 
            "text": "To sign out a user, call  logout .  Syntax :  $auth.logout()", 
            "title": "SignOut"
        }, 
        {
            "location": "/storage/", 
            "text": "Before you begin, please check the \nfirebase storage docs\n.\n\n\n\n\nMyfirebase provides a simple way to interact with firebase storage via a global instance \n$sotrage\n.\n\n\nMyfirebase Storage instance\n\n\nSyntax : \n$storage\n\n\n$auth\n is a global auth instance which called through Vue component.\n\n\n\n\n\nGet firebase storage instance\n\n\nSyntax : \n$storage.get()\n\n\nYou can retrive firebase storage object usign \nget()\n method.\n\n\n\n\n\nGet File URL\n\n\nSyntax : \n$storage.getDownloadURL(object)\n\n\nYou can get your file URL such like user avatar or document which stored through firebase storage using \ngetDownloadURL\n.\n\n\nExample\n\n\ntemplate\n\n    \ndiv\n \nclass \n=\n \ncontainer\n\n        \nimg\n \n:src\n=\navatar\n \nalt\n=\nuser-avatar\n \n/\n\n    \n/\ndiv\n\n\n/\ntemplate\n\n\nscript\n\n    \nexport\n \ndefault\n \n{\n\n        \nmounted\n()\n \n{\n\n            \n// Get file URL from firebase storage\n\n            \nthis\n.\n$storage\n.\ngetDownloadURL\n({\n\n                \nref\n:\n \nimages/default.png\n,\n\n                \nresult\n:\n \n(\nresult\n)\n \n=\n \n{\n\n                    \nthis\n.\navatar\n \n=\n \nresult\n\n                \n},\n\n                \nerror\n:\n \n(\nerror\n)\n \n=\n \n{\n\n                    \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                \n}\n\n            \n})\n\n        \n},\n\n        \ndata\n()\n \n{\n\n            \nreturn\n \n{\n\n                \navatar\n:\n \n\n            \n}\n\n        \n}\n\n    \n}\n\n\n/\nscript\n\n\n\n\n\n\n\n\n\nUpload file\n\n\nSytax : \n$storage.upload(object)\n\n\nYou can upload a file to firebase storage usign \nupload(object)\n.\n\n\nExample\n\n\nWe are going to upload a new file to the server usign upload method.\n\n\ntemplate\n\n    \ndiv\n \nclass \n=\n \ncontainer\n\n        \nlabel\n \nclass\n=\nbtn btn-default\n\n            \ninput\n \ntype\n=\nfile\n \nclass\n=\nhidden\n \n@\nchange\n=\ngetFile\n\n            Browse\n        \n/\nlabel\n\n        \nbutton\n \nclass\n=\nbtn btn-primary\n \n@\nclick\n=\nuploadAvatar()\n update\n/\ni\n/\nbutton\n\n    \n/\ndiv\n\n\n/\ntemplate\n\n\n\nscript\n\n    \nexport\n \ndefault\n \n{\n\n        \ndata\n(){\n\n            \nreturn\n \n{\n\n                \n// new file\n\n                \nnewAvatar\n:\n \n\n            \n}\n\n        \n},\n\n        \nmethods\n:\n \n{\n\n            \n// get file form input\n\n            \ngetFile\n(\ne\n)\n \n{\n\n                \nthis\n.\nnewAvatar\n \n=\n \ne\n.\ntarget\n.\nfiles\n[\n0\n]\n\n            \n},\n\n            \n// upload file\n\n            \nuploadAvatar\n()\n \n{\n\n                \nif\n \n(\n!\nthis\n.\nnewAvatar\n)\n \n{\n\n                    \nreturn\n\n                \n}\n\n                \nlet\n \nname\n \n=\n \nthis\n.\nnewAvatar\n.\nname\n\n                \n// start uploading\n\n                \nthis\n.\n$storage\n.\nupload\n({\n\n                    \nref\n:\n \n`/images/\n${\nname\n}\n`\n,\n\n                    \nfile\n:\n \nthis\n.\nnewAvatar\n,\n\n                    \nprogress\n:\n \n(\nsnapshot\n)\n \n=\n \n{},\n\n                    \nerror\n:\n \n(\nerr\n)\n \n=\n \n{\n\n                        \nconsole\n.\nlog\n(\nerr\n.\nmessage\n)\n\n                    \n},\n\n                    \ncompleted\n:\n \n(\ndownloadURL\n)\n \n=\n \n{\n\n                        \nconsole\n.\nlog\n(\ndownloadURL\n)\n\n                    \n}\n\n                \n})\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n/\nscript\n\n\n\n\n\n\nDelete file\n\n\nSyntax : \n$storage.delete(string)\n\n\nYou can delete a file with \ndelete\n method specifying the file path.\n\n\n\n\nfile path is a storage path where the concerned file is located.\n\n\n\n\nExample\n\n\ntemplate\n\n    \ndiv\n \nclass \n=\n \ncontainer\n\n        \nbutton\n \n@\nclick\n=\ndelete()\nDelete photo\n/\nbutton\n\n    \n/\ndiv\n\n\n/\ntemplate\n\n\nscript\n\n    \nexport\n \ndefault\n \n{\n\n        \ndata\n()\n \n{\n\n            \nreturn\n \n{\n\n                \nfile\n:\n \nimage/file.png\n\n            \n}\n\n        \n},\n\n        \nmethods\n:\n \n{\n\n            \ndelete\n()\n \n{\n\n                \nthis\n.\n$storage\n.\ndelete\n({\n\n                    \nref\n:\n \nthis\n.\nfile\n,\n\n                    \nresult\n:\n \n()\n \n=\n \n{\n\n                        \nconsole\n.\nlog\n(\nDeleted\n)\n\n                    \n},\n\n                    \nerror\n:\n \n(\nerror\n)\n \n=\n \n{\n\n                        \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n\n                    \n}\n\n                \n})\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n/\nscript", 
            "title": "Cloud Storage"
        }, 
        {
            "location": "/storage/#myfirebase-storage-instance", 
            "text": "Syntax :  $storage  $auth  is a global auth instance which called through Vue component.", 
            "title": "Myfirebase Storage instance"
        }, 
        {
            "location": "/storage/#get-firebase-storage-instance", 
            "text": "Syntax :  $storage.get()  You can retrive firebase storage object usign  get()  method.", 
            "title": "Get firebase storage instance"
        }, 
        {
            "location": "/storage/#get-file-url", 
            "text": "Syntax :  $storage.getDownloadURL(object)  You can get your file URL such like user avatar or document which stored through firebase storage using  getDownloadURL .", 
            "title": "Get File URL"
        }, 
        {
            "location": "/storage/#example", 
            "text": "template \n     div   class  =   container \n         img   :src = avatar   alt = user-avatar   / \n     / div  / template  script \n     export   default   { \n         mounted ()   { \n             // Get file URL from firebase storage \n             this . $storage . getDownloadURL ({ \n                 ref :   images/default.png , \n                 result :   ( result )   =   { \n                     this . avatar   =   result \n                 }, \n                 error :   ( error )   =   { \n                     console . log ( error . message ) \n                 } \n             }) \n         }, \n         data ()   { \n             return   { \n                 avatar :   \n             } \n         } \n     }  / script", 
            "title": "Example"
        }, 
        {
            "location": "/storage/#upload-file", 
            "text": "Sytax :  $storage.upload(object)  You can upload a file to firebase storage usign  upload(object) .", 
            "title": "Upload file"
        }, 
        {
            "location": "/storage/#example_1", 
            "text": "We are going to upload a new file to the server usign upload method.  template \n     div   class  =   container \n         label   class = btn btn-default \n             input   type = file   class = hidden   @ change = getFile \n            Browse\n         / label \n         button   class = btn btn-primary   @ click = uploadAvatar()  update / i / button \n     / div  / template  script \n     export   default   { \n         data (){ \n             return   { \n                 // new file \n                 newAvatar :   \n             } \n         }, \n         methods :   { \n             // get file form input \n             getFile ( e )   { \n                 this . newAvatar   =   e . target . files [ 0 ] \n             }, \n             // upload file \n             uploadAvatar ()   { \n                 if   ( ! this . newAvatar )   { \n                     return \n                 } \n                 let   name   =   this . newAvatar . name \n                 // start uploading \n                 this . $storage . upload ({ \n                     ref :   `/images/ ${ name } ` , \n                     file :   this . newAvatar , \n                     progress :   ( snapshot )   =   {}, \n                     error :   ( err )   =   { \n                         console . log ( err . message ) \n                     }, \n                     completed :   ( downloadURL )   =   { \n                         console . log ( downloadURL ) \n                     } \n                 }) \n             } \n         } \n     }  / script", 
            "title": "Example"
        }, 
        {
            "location": "/storage/#delete-file", 
            "text": "Syntax :  $storage.delete(string)  You can delete a file with  delete  method specifying the file path.   file path is a storage path where the concerned file is located.", 
            "title": "Delete file"
        }, 
        {
            "location": "/storage/#example_2", 
            "text": "template \n     div   class  =   container \n         button   @ click = delete() Delete photo / button \n     / div  / template  script \n     export   default   { \n         data ()   { \n             return   { \n                 file :   image/file.png \n             } \n         }, \n         methods :   { \n             delete ()   { \n                 this . $storage . delete ({ \n                     ref :   this . file , \n                     result :   ()   =   { \n                         console . log ( Deleted ) \n                     }, \n                     error :   ( error )   =   { \n                         console . log ( error . message ) \n                     } \n                 }) \n             } \n         } \n     }  / script", 
            "title": "Example"
        }
    ]
}